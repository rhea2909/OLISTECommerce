{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Brazilian E-commerce Public Dataset by Olist\n",
    "##### This dataset was generously provided by Olist, the largest department store in Brazilian marketplaces. Olist connects small businesses from all over Brazil to channels without hassle and with a single contract. Those merchants are able to sell their products through the Olist Store and ship them directly to the customers using Olist logistics partners.\n",
    "\n",
    "##### Let's check what the data has to offer."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [],
   "source": [
    "#import all the required libraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "!pip install bokeh"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Kindly edit the path for the CSVs instead of ~"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [],
   "source": [
    "#read all the datasets into different variables\n",
    "cust = pd.read_csv('~/Data_mining/DataArchives/olist_customers_dataset.csv') #customer data cust id PK\n",
    "loc = pd.read_csv('~/Data_mining/DataArchives/olist_geolocation_dataset.csv') #location details zip code PK\n",
    "order = pd.read_csv('~/Data_mining/DataArchives/olist_order_items_dataset.csv') #orders order id PK\n",
    "pay = pd.read_csv('~/Data_mining/DataArchives/olist_order_payments_dataset.csv')#payment info Payment id PK\n",
    "review = pd.read_csv('~/Data_mining/DataArchives/olist_order_reviews_dataset.csv') #reviews review id PK\n",
    "ord_cust = pd.read_csv('~/Data_mining/DataArchives/olist_orders_dataset.csv') # order and cust id PK\n",
    "product = pd.read_csv('~/Data_mining/DataArchives/olist_products_dataset.csv')# product id PK\n",
    "sellers = pd.read_csv('~/Data_mining/DataArchives/olist_sellers_dataset.csv')# seller id PK\n",
    "prd_name = pd.read_csv('~/Data_mining/DataArchives/product_category_name_translation.csv') #translation data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "customer_id                 0\n",
      "customer_unique_id          0\n",
      "customer_zip_code_prefix    0\n",
      "customer_city               0\n",
      "customer_state              0\n",
      "dtype: int64\n",
      "order_id               0\n",
      "order_item_id          0\n",
      "product_id             0\n",
      "seller_id              0\n",
      "shipping_limit_date    0\n",
      "price                  0\n",
      "freight_value          0\n",
      "dtype: int64\n",
      "order_id                0\n",
      "payment_sequential      0\n",
      "payment_type            0\n",
      "payment_installments    0\n",
      "payment_value           0\n",
      "dtype: int64\n",
      "review_id                      0\n",
      "order_id                       0\n",
      "review_score                   0\n",
      "review_comment_title       88285\n",
      "review_comment_message     58247\n",
      "review_creation_date           0\n",
      "review_answer_timestamp        0\n",
      "dtype: int64\n",
      "order_id                            0\n",
      "customer_id                         0\n",
      "order_status                        0\n",
      "order_purchase_timestamp            0\n",
      "order_approved_at                 160\n",
      "order_delivered_carrier_date     1783\n",
      "order_delivered_customer_date    2965\n",
      "order_estimated_delivery_date       0\n",
      "dtype: int64\n",
      "product_id                      0\n",
      "product_category_name         610\n",
      "product_name_lenght           610\n",
      "product_description_lenght    610\n",
      "product_photos_qty            610\n",
      "product_weight_g                2\n",
      "product_length_cm               2\n",
      "product_height_cm               2\n",
      "product_width_cm                2\n",
      "dtype: int64\n",
      "seller_id                 0\n",
      "seller_zip_code_prefix    0\n",
      "seller_city               0\n",
      "seller_state              0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "#check for null values\n",
    "print(cust.isnull().sum())\n",
    "print(order.isnull().sum())\n",
    "print(pay.isnull().sum())\n",
    "print(review.isnull().sum())\n",
    "print(ord_cust.isnull().sum())\n",
    "print(product.isnull().sum())\n",
    "print(sellers.isnull().sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Descriptive Statistics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>unique</th>\n",
       "      <th>top</th>\n",
       "      <th>freq</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>customer_id</th>\n",
       "      <td>99441</td>\n",
       "      <td>99441</td>\n",
       "      <td>2b99e152f2351410951c503a2f6a2d7e</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>customer_unique_id</th>\n",
       "      <td>99441</td>\n",
       "      <td>96096</td>\n",
       "      <td>8d50f5eadf50201ccdcedfb9e2ac8455</td>\n",
       "      <td>17</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>customer_zip_code_prefix</th>\n",
       "      <td>99441</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>35137.5</td>\n",
       "      <td>29797.9</td>\n",
       "      <td>1003</td>\n",
       "      <td>11347</td>\n",
       "      <td>24416</td>\n",
       "      <td>58900</td>\n",
       "      <td>99990</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>customer_city</th>\n",
       "      <td>99441</td>\n",
       "      <td>4119</td>\n",
       "      <td>sao paulo</td>\n",
       "      <td>15540</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>customer_state</th>\n",
       "      <td>99441</td>\n",
       "      <td>27</td>\n",
       "      <td>SP</td>\n",
       "      <td>41746</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                          count unique                               top  \\\n",
       "customer_id               99441  99441  2b99e152f2351410951c503a2f6a2d7e   \n",
       "customer_unique_id        99441  96096  8d50f5eadf50201ccdcedfb9e2ac8455   \n",
       "customer_zip_code_prefix  99441    NaN                               NaN   \n",
       "customer_city             99441   4119                         sao paulo   \n",
       "customer_state            99441     27                                SP   \n",
       "\n",
       "                           freq     mean      std   min    25%    50%    75%  \\\n",
       "customer_id                   1      NaN      NaN   NaN    NaN    NaN    NaN   \n",
       "customer_unique_id           17      NaN      NaN   NaN    NaN    NaN    NaN   \n",
       "customer_zip_code_prefix    NaN  35137.5  29797.9  1003  11347  24416  58900   \n",
       "customer_city             15540      NaN      NaN   NaN    NaN    NaN    NaN   \n",
       "customer_state            41746      NaN      NaN   NaN    NaN    NaN    NaN   \n",
       "\n",
       "                            max  \n",
       "customer_id                 NaN  \n",
       "customer_unique_id          NaN  \n",
       "customer_zip_code_prefix  99990  \n",
       "customer_city               NaN  \n",
       "customer_state              NaN  "
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cust.describe(include='all').T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>unique</th>\n",
       "      <th>top</th>\n",
       "      <th>freq</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>order_id</th>\n",
       "      <td>112650</td>\n",
       "      <td>98666</td>\n",
       "      <td>8272b63d03f5f79c56e9e4120aec44ef</td>\n",
       "      <td>21</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>order_item_id</th>\n",
       "      <td>112650</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.19783</td>\n",
       "      <td>0.705124</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>product_id</th>\n",
       "      <td>112650</td>\n",
       "      <td>32951</td>\n",
       "      <td>aca2eb7d00ea1a7b8ebd4e68314663af</td>\n",
       "      <td>527</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>seller_id</th>\n",
       "      <td>112650</td>\n",
       "      <td>3095</td>\n",
       "      <td>6560211a19b47992c3666cc44a7e94c0</td>\n",
       "      <td>2033</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>shipping_limit_date</th>\n",
       "      <td>112650</td>\n",
       "      <td>93318</td>\n",
       "      <td>2017-07-21 18:25:23</td>\n",
       "      <td>21</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>price</th>\n",
       "      <td>112650</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>120.654</td>\n",
       "      <td>183.634</td>\n",
       "      <td>0.85</td>\n",
       "      <td>39.9</td>\n",
       "      <td>74.99</td>\n",
       "      <td>134.9</td>\n",
       "      <td>6735</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freight_value</th>\n",
       "      <td>112650</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>19.9903</td>\n",
       "      <td>15.8064</td>\n",
       "      <td>0</td>\n",
       "      <td>13.08</td>\n",
       "      <td>16.26</td>\n",
       "      <td>21.15</td>\n",
       "      <td>409.68</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      count unique                               top  freq  \\\n",
       "order_id             112650  98666  8272b63d03f5f79c56e9e4120aec44ef    21   \n",
       "order_item_id        112650    NaN                               NaN   NaN   \n",
       "product_id           112650  32951  aca2eb7d00ea1a7b8ebd4e68314663af   527   \n",
       "seller_id            112650   3095  6560211a19b47992c3666cc44a7e94c0  2033   \n",
       "shipping_limit_date  112650  93318               2017-07-21 18:25:23    21   \n",
       "price                112650    NaN                               NaN   NaN   \n",
       "freight_value        112650    NaN                               NaN   NaN   \n",
       "\n",
       "                        mean       std   min    25%    50%    75%     max  \n",
       "order_id                 NaN       NaN   NaN    NaN    NaN    NaN     NaN  \n",
       "order_item_id        1.19783  0.705124     1      1      1      1      21  \n",
       "product_id               NaN       NaN   NaN    NaN    NaN    NaN     NaN  \n",
       "seller_id                NaN       NaN   NaN    NaN    NaN    NaN     NaN  \n",
       "shipping_limit_date      NaN       NaN   NaN    NaN    NaN    NaN     NaN  \n",
       "price                120.654   183.634  0.85   39.9  74.99  134.9    6735  \n",
       "freight_value        19.9903   15.8064     0  13.08  16.26  21.15  409.68  "
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "order.describe(include='all').T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>unique</th>\n",
       "      <th>top</th>\n",
       "      <th>freq</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>order_id</th>\n",
       "      <td>103886</td>\n",
       "      <td>99440</td>\n",
       "      <td>fa65dad1b0e818e3ccc5cb0e39231352</td>\n",
       "      <td>29</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>payment_sequential</th>\n",
       "      <td>103886</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.09268</td>\n",
       "      <td>0.706584</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>payment_type</th>\n",
       "      <td>103886</td>\n",
       "      <td>5</td>\n",
       "      <td>credit_card</td>\n",
       "      <td>76795</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>payment_installments</th>\n",
       "      <td>103886</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.85335</td>\n",
       "      <td>2.68705</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>payment_value</th>\n",
       "      <td>103886</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>154.1</td>\n",
       "      <td>217.494</td>\n",
       "      <td>0</td>\n",
       "      <td>56.79</td>\n",
       "      <td>100</td>\n",
       "      <td>171.838</td>\n",
       "      <td>13664.1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       count unique                               top   freq  \\\n",
       "order_id              103886  99440  fa65dad1b0e818e3ccc5cb0e39231352     29   \n",
       "payment_sequential    103886    NaN                               NaN    NaN   \n",
       "payment_type          103886      5                       credit_card  76795   \n",
       "payment_installments  103886    NaN                               NaN    NaN   \n",
       "payment_value         103886    NaN                               NaN    NaN   \n",
       "\n",
       "                         mean       std  min    25%  50%      75%      max  \n",
       "order_id                  NaN       NaN  NaN    NaN  NaN      NaN      NaN  \n",
       "payment_sequential    1.09268  0.706584    1      1    1        1       29  \n",
       "payment_type              NaN       NaN  NaN    NaN  NaN      NaN      NaN  \n",
       "payment_installments  2.85335   2.68705    0      1    1        4       24  \n",
       "payment_value           154.1   217.494    0  56.79  100  171.838  13664.1  "
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pay.describe(include='all').T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>unique</th>\n",
       "      <th>top</th>\n",
       "      <th>freq</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>review_id</th>\n",
       "      <td>100000</td>\n",
       "      <td>99173</td>\n",
       "      <td>4219a80ab469e3fc9901437b73da3f75</td>\n",
       "      <td>3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>order_id</th>\n",
       "      <td>100000</td>\n",
       "      <td>99441</td>\n",
       "      <td>c88b1d1b157a9999ce368f218a407141</td>\n",
       "      <td>3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>review_score</th>\n",
       "      <td>100000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.07089</td>\n",
       "      <td>1.35966</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>review_comment_title</th>\n",
       "      <td>11715</td>\n",
       "      <td>4600</td>\n",
       "      <td>Recomendo</td>\n",
       "      <td>426</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>review_comment_message</th>\n",
       "      <td>41753</td>\n",
       "      <td>36921</td>\n",
       "      <td>Muito bom</td>\n",
       "      <td>230</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>review_creation_date</th>\n",
       "      <td>100000</td>\n",
       "      <td>637</td>\n",
       "      <td>2017-12-19 00:00:00</td>\n",
       "      <td>466</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>review_answer_timestamp</th>\n",
       "      <td>100000</td>\n",
       "      <td>99010</td>\n",
       "      <td>2017-06-15 23:21:05</td>\n",
       "      <td>4</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                          count unique                               top freq  \\\n",
       "review_id                100000  99173  4219a80ab469e3fc9901437b73da3f75    3   \n",
       "order_id                 100000  99441  c88b1d1b157a9999ce368f218a407141    3   \n",
       "review_score             100000    NaN                               NaN  NaN   \n",
       "review_comment_title      11715   4600                         Recomendo  426   \n",
       "review_comment_message    41753  36921                         Muito bom  230   \n",
       "review_creation_date     100000    637               2017-12-19 00:00:00  466   \n",
       "review_answer_timestamp  100000  99010               2017-06-15 23:21:05    4   \n",
       "\n",
       "                            mean      std  min  25%  50%  75%  max  \n",
       "review_id                    NaN      NaN  NaN  NaN  NaN  NaN  NaN  \n",
       "order_id                     NaN      NaN  NaN  NaN  NaN  NaN  NaN  \n",
       "review_score             4.07089  1.35966    1    4    5    5    5  \n",
       "review_comment_title         NaN      NaN  NaN  NaN  NaN  NaN  NaN  \n",
       "review_comment_message       NaN      NaN  NaN  NaN  NaN  NaN  NaN  \n",
       "review_creation_date         NaN      NaN  NaN  NaN  NaN  NaN  NaN  \n",
       "review_answer_timestamp      NaN      NaN  NaN  NaN  NaN  NaN  NaN  "
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "review.describe(include='all').T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>unique</th>\n",
       "      <th>top</th>\n",
       "      <th>freq</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>order_id</th>\n",
       "      <td>99441</td>\n",
       "      <td>99441</td>\n",
       "      <td>331179a115e1b772b2f4ff3f99f0c713</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>customer_id</th>\n",
       "      <td>99441</td>\n",
       "      <td>99441</td>\n",
       "      <td>0f139d1b208a62a37671423e5eff5016</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>order_status</th>\n",
       "      <td>99441</td>\n",
       "      <td>8</td>\n",
       "      <td>delivered</td>\n",
       "      <td>96478</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>order_purchase_timestamp</th>\n",
       "      <td>99441</td>\n",
       "      <td>98875</td>\n",
       "      <td>2017-11-20 10:59:08</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>order_approved_at</th>\n",
       "      <td>99281</td>\n",
       "      <td>90733</td>\n",
       "      <td>2018-02-27 04:31:10</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>order_delivered_carrier_date</th>\n",
       "      <td>97658</td>\n",
       "      <td>81018</td>\n",
       "      <td>2018-05-09 15:48:00</td>\n",
       "      <td>47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>order_delivered_customer_date</th>\n",
       "      <td>96476</td>\n",
       "      <td>95664</td>\n",
       "      <td>2018-07-24 21:36:42</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>order_estimated_delivery_date</th>\n",
       "      <td>99441</td>\n",
       "      <td>459</td>\n",
       "      <td>2017-12-20 00:00:00</td>\n",
       "      <td>522</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                               count unique                               top  \\\n",
       "order_id                       99441  99441  331179a115e1b772b2f4ff3f99f0c713   \n",
       "customer_id                    99441  99441  0f139d1b208a62a37671423e5eff5016   \n",
       "order_status                   99441      8                         delivered   \n",
       "order_purchase_timestamp       99441  98875               2017-11-20 10:59:08   \n",
       "order_approved_at              99281  90733               2018-02-27 04:31:10   \n",
       "order_delivered_carrier_date   97658  81018               2018-05-09 15:48:00   \n",
       "order_delivered_customer_date  96476  95664               2018-07-24 21:36:42   \n",
       "order_estimated_delivery_date  99441    459               2017-12-20 00:00:00   \n",
       "\n",
       "                                freq  \n",
       "order_id                           1  \n",
       "customer_id                        1  \n",
       "order_status                   96478  \n",
       "order_purchase_timestamp           3  \n",
       "order_approved_at                  9  \n",
       "order_delivered_carrier_date      47  \n",
       "order_delivered_customer_date      3  \n",
       "order_estimated_delivery_date    522  "
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ord_cust.describe(include='all').T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>unique</th>\n",
       "      <th>top</th>\n",
       "      <th>freq</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>product_id</th>\n",
       "      <td>32951</td>\n",
       "      <td>32951</td>\n",
       "      <td>8f83335d6508c667813ff14dc437bc81</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>product_category_name</th>\n",
       "      <td>32341</td>\n",
       "      <td>73</td>\n",
       "      <td>cama_mesa_banho</td>\n",
       "      <td>3029</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>product_name_lenght</th>\n",
       "      <td>32341</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>48.4769</td>\n",
       "      <td>10.2457</td>\n",
       "      <td>5</td>\n",
       "      <td>42</td>\n",
       "      <td>51</td>\n",
       "      <td>57</td>\n",
       "      <td>76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>product_description_lenght</th>\n",
       "      <td>32341</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>771.495</td>\n",
       "      <td>635.115</td>\n",
       "      <td>4</td>\n",
       "      <td>339</td>\n",
       "      <td>595</td>\n",
       "      <td>972</td>\n",
       "      <td>3992</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>product_photos_qty</th>\n",
       "      <td>32341</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.18899</td>\n",
       "      <td>1.73677</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>product_weight_g</th>\n",
       "      <td>32949</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2276.47</td>\n",
       "      <td>4282.04</td>\n",
       "      <td>0</td>\n",
       "      <td>300</td>\n",
       "      <td>700</td>\n",
       "      <td>1900</td>\n",
       "      <td>40425</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>product_length_cm</th>\n",
       "      <td>32949</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>30.8151</td>\n",
       "      <td>16.9145</td>\n",
       "      <td>7</td>\n",
       "      <td>18</td>\n",
       "      <td>25</td>\n",
       "      <td>38</td>\n",
       "      <td>105</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>product_height_cm</th>\n",
       "      <td>32949</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>16.9377</td>\n",
       "      <td>13.6376</td>\n",
       "      <td>2</td>\n",
       "      <td>8</td>\n",
       "      <td>13</td>\n",
       "      <td>21</td>\n",
       "      <td>105</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>product_width_cm</th>\n",
       "      <td>32949</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>23.1967</td>\n",
       "      <td>12.079</td>\n",
       "      <td>6</td>\n",
       "      <td>15</td>\n",
       "      <td>20</td>\n",
       "      <td>30</td>\n",
       "      <td>118</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                            count unique                               top  \\\n",
       "product_id                  32951  32951  8f83335d6508c667813ff14dc437bc81   \n",
       "product_category_name       32341     73                   cama_mesa_banho   \n",
       "product_name_lenght         32341    NaN                               NaN   \n",
       "product_description_lenght  32341    NaN                               NaN   \n",
       "product_photos_qty          32341    NaN                               NaN   \n",
       "product_weight_g            32949    NaN                               NaN   \n",
       "product_length_cm           32949    NaN                               NaN   \n",
       "product_height_cm           32949    NaN                               NaN   \n",
       "product_width_cm            32949    NaN                               NaN   \n",
       "\n",
       "                            freq     mean      std  min  25%  50%   75%    max  \n",
       "product_id                     1      NaN      NaN  NaN  NaN  NaN   NaN    NaN  \n",
       "product_category_name       3029      NaN      NaN  NaN  NaN  NaN   NaN    NaN  \n",
       "product_name_lenght          NaN  48.4769  10.2457    5   42   51    57     76  \n",
       "product_description_lenght   NaN  771.495  635.115    4  339  595   972   3992  \n",
       "product_photos_qty           NaN  2.18899  1.73677    1    1    1     3     20  \n",
       "product_weight_g             NaN  2276.47  4282.04    0  300  700  1900  40425  \n",
       "product_length_cm            NaN  30.8151  16.9145    7   18   25    38    105  \n",
       "product_height_cm            NaN  16.9377  13.6376    2    8   13    21    105  \n",
       "product_width_cm             NaN  23.1967   12.079    6   15   20    30    118  "
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "product.describe(include='all').T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>unique</th>\n",
       "      <th>top</th>\n",
       "      <th>freq</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>seller_id</th>\n",
       "      <td>3095</td>\n",
       "      <td>3095</td>\n",
       "      <td>cd233f8bfa30ebfd651f47ee7d054951</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>seller_zip_code_prefix</th>\n",
       "      <td>3095</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>32291.1</td>\n",
       "      <td>32713.5</td>\n",
       "      <td>1001</td>\n",
       "      <td>7093.5</td>\n",
       "      <td>14940</td>\n",
       "      <td>64552.5</td>\n",
       "      <td>99730</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>seller_city</th>\n",
       "      <td>3095</td>\n",
       "      <td>611</td>\n",
       "      <td>sao paulo</td>\n",
       "      <td>694</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>seller_state</th>\n",
       "      <td>3095</td>\n",
       "      <td>23</td>\n",
       "      <td>SP</td>\n",
       "      <td>1849</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       count unique                               top  freq  \\\n",
       "seller_id               3095   3095  cd233f8bfa30ebfd651f47ee7d054951     1   \n",
       "seller_zip_code_prefix  3095    NaN                               NaN   NaN   \n",
       "seller_city             3095    611                         sao paulo   694   \n",
       "seller_state            3095     23                                SP  1849   \n",
       "\n",
       "                           mean      std   min     25%    50%      75%    max  \n",
       "seller_id                   NaN      NaN   NaN     NaN    NaN      NaN    NaN  \n",
       "seller_zip_code_prefix  32291.1  32713.5  1001  7093.5  14940  64552.5  99730  \n",
       "seller_city                 NaN      NaN   NaN     NaN    NaN      NaN    NaN  \n",
       "seller_state                NaN      NaN   NaN     NaN    NaN      NaN    NaN  "
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sellers.describe(include='all').T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [],
   "source": [
    "#change to datetime datatype\n",
    "ord_cust['order_purchase_timestamp'] = pd.to_datetime(ord_cust['order_purchase_timestamp'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Number of orders over the years"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [],
   "source": [
    "order_date = pd.DataFrame(ord_cust.groupby(ord_cust['order_purchase_timestamp'].dt.date).size(),columns = ['count'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Kindly run the below cell to view the Bokeh Graph"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "    <div class=\"bk-root\">\n",
       "        <a href=\"https://bokeh.org\" target=\"_blank\" class=\"bk-logo bk-logo-small bk-logo-notebook\"></a>\n",
       "        <span id=\"2387\">Loading BokehJS ...</span>\n",
       "    </div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/javascript": [
       "\n",
       "(function(root) {\n",
       "  function now() {\n",
       "    return new Date();\n",
       "  }\n",
       "\n",
       "  var force = true;\n",
       "\n",
       "  if (typeof root._bokeh_onload_callbacks === \"undefined\" || force === true) {\n",
       "    root._bokeh_onload_callbacks = [];\n",
       "    root._bokeh_is_loading = undefined;\n",
       "  }\n",
       "\n",
       "  var JS_MIME_TYPE = 'application/javascript';\n",
       "  var HTML_MIME_TYPE = 'text/html';\n",
       "  var EXEC_MIME_TYPE = 'application/vnd.bokehjs_exec.v0+json';\n",
       "  var CLASS_NAME = 'output_bokeh rendered_html';\n",
       "\n",
       "  /**\n",
       "   * Render data to the DOM node\n",
       "   */\n",
       "  function render(props, node) {\n",
       "    var script = document.createElement(\"script\");\n",
       "    node.appendChild(script);\n",
       "  }\n",
       "\n",
       "  /**\n",
       "   * Handle when an output is cleared or removed\n",
       "   */\n",
       "  function handleClearOutput(event, handle) {\n",
       "    var cell = handle.cell;\n",
       "\n",
       "    var id = cell.output_area._bokeh_element_id;\n",
       "    var server_id = cell.output_area._bokeh_server_id;\n",
       "    // Clean up Bokeh references\n",
       "    if (id != null && id in Bokeh.index) {\n",
       "      Bokeh.index[id].model.document.clear();\n",
       "      delete Bokeh.index[id];\n",
       "    }\n",
       "\n",
       "    if (server_id !== undefined) {\n",
       "      // Clean up Bokeh references\n",
       "      var cmd = \"from bokeh.io.state import curstate; print(curstate().uuid_to_server['\" + server_id + \"'].get_sessions()[0].document.roots[0]._id)\";\n",
       "      cell.notebook.kernel.execute(cmd, {\n",
       "        iopub: {\n",
       "          output: function(msg) {\n",
       "            var id = msg.content.text.trim();\n",
       "            if (id in Bokeh.index) {\n",
       "              Bokeh.index[id].model.document.clear();\n",
       "              delete Bokeh.index[id];\n",
       "            }\n",
       "          }\n",
       "        }\n",
       "      });\n",
       "      // Destroy server and session\n",
       "      var cmd = \"import bokeh.io.notebook as ion; ion.destroy_server('\" + server_id + \"')\";\n",
       "      cell.notebook.kernel.execute(cmd);\n",
       "    }\n",
       "  }\n",
       "\n",
       "  /**\n",
       "   * Handle when a new output is added\n",
       "   */\n",
       "  function handleAddOutput(event, handle) {\n",
       "    var output_area = handle.output_area;\n",
       "    var output = handle.output;\n",
       "\n",
       "    // limit handleAddOutput to display_data with EXEC_MIME_TYPE content only\n",
       "    if ((output.output_type != \"display_data\") || (!output.data.hasOwnProperty(EXEC_MIME_TYPE))) {\n",
       "      return\n",
       "    }\n",
       "\n",
       "    var toinsert = output_area.element.find(\".\" + CLASS_NAME.split(' ')[0]);\n",
       "\n",
       "    if (output.metadata[EXEC_MIME_TYPE][\"id\"] !== undefined) {\n",
       "      toinsert[toinsert.length - 1].firstChild.textContent = output.data[JS_MIME_TYPE];\n",
       "      // store reference to embed id on output_area\n",
       "      output_area._bokeh_element_id = output.metadata[EXEC_MIME_TYPE][\"id\"];\n",
       "    }\n",
       "    if (output.metadata[EXEC_MIME_TYPE][\"server_id\"] !== undefined) {\n",
       "      var bk_div = document.createElement(\"div\");\n",
       "      bk_div.innerHTML = output.data[HTML_MIME_TYPE];\n",
       "      var script_attrs = bk_div.children[0].attributes;\n",
       "      for (var i = 0; i < script_attrs.length; i++) {\n",
       "        toinsert[toinsert.length - 1].firstChild.setAttribute(script_attrs[i].name, script_attrs[i].value);\n",
       "        toinsert[toinsert.length - 1].firstChild.textContent = bk_div.children[0].textContent\n",
       "      }\n",
       "      // store reference to server id on output_area\n",
       "      output_area._bokeh_server_id = output.metadata[EXEC_MIME_TYPE][\"server_id\"];\n",
       "    }\n",
       "  }\n",
       "\n",
       "  function register_renderer(events, OutputArea) {\n",
       "\n",
       "    function append_mime(data, metadata, element) {\n",
       "      // create a DOM node to render to\n",
       "      var toinsert = this.create_output_subarea(\n",
       "        metadata,\n",
       "        CLASS_NAME,\n",
       "        EXEC_MIME_TYPE\n",
       "      );\n",
       "      this.keyboard_manager.register_events(toinsert);\n",
       "      // Render to node\n",
       "      var props = {data: data, metadata: metadata[EXEC_MIME_TYPE]};\n",
       "      render(props, toinsert[toinsert.length - 1]);\n",
       "      element.append(toinsert);\n",
       "      return toinsert\n",
       "    }\n",
       "\n",
       "    /* Handle when an output is cleared or removed */\n",
       "    events.on('clear_output.CodeCell', handleClearOutput);\n",
       "    events.on('delete.Cell', handleClearOutput);\n",
       "\n",
       "    /* Handle when a new output is added */\n",
       "    events.on('output_added.OutputArea', handleAddOutput);\n",
       "\n",
       "    /**\n",
       "     * Register the mime type and append_mime function with output_area\n",
       "     */\n",
       "    OutputArea.prototype.register_mime_type(EXEC_MIME_TYPE, append_mime, {\n",
       "      /* Is output safe? */\n",
       "      safe: true,\n",
       "      /* Index of renderer in `output_area.display_order` */\n",
       "      index: 0\n",
       "    });\n",
       "  }\n",
       "\n",
       "  // register the mime type if in Jupyter Notebook environment and previously unregistered\n",
       "  if (root.Jupyter !== undefined) {\n",
       "    var events = require('base/js/events');\n",
       "    var OutputArea = require('notebook/js/outputarea').OutputArea;\n",
       "\n",
       "    if (OutputArea.prototype.mime_types().indexOf(EXEC_MIME_TYPE) == -1) {\n",
       "      register_renderer(events, OutputArea);\n",
       "    }\n",
       "  }\n",
       "\n",
       "  \n",
       "  if (typeof (root._bokeh_timeout) === \"undefined\" || force === true) {\n",
       "    root._bokeh_timeout = Date.now() + 5000;\n",
       "    root._bokeh_failed_load = false;\n",
       "  }\n",
       "\n",
       "  var NB_LOAD_WARNING = {'data': {'text/html':\n",
       "     \"<div style='background-color: #fdd'>\\n\"+\n",
       "     \"<p>\\n\"+\n",
       "     \"BokehJS does not appear to have successfully loaded. If loading BokehJS from CDN, this \\n\"+\n",
       "     \"may be due to a slow or bad network connection. Possible fixes:\\n\"+\n",
       "     \"</p>\\n\"+\n",
       "     \"<ul>\\n\"+\n",
       "     \"<li>re-rerun `output_notebook()` to attempt to load from CDN again, or</li>\\n\"+\n",
       "     \"<li>use INLINE resources instead, as so:</li>\\n\"+\n",
       "     \"</ul>\\n\"+\n",
       "     \"<code>\\n\"+\n",
       "     \"from bokeh.resources import INLINE\\n\"+\n",
       "     \"output_notebook(resources=INLINE)\\n\"+\n",
       "     \"</code>\\n\"+\n",
       "     \"</div>\"}};\n",
       "\n",
       "  function display_loaded() {\n",
       "    var el = document.getElementById(\"2387\");\n",
       "    if (el != null) {\n",
       "      el.textContent = \"BokehJS is loading...\";\n",
       "    }\n",
       "    if (root.Bokeh !== undefined) {\n",
       "      if (el != null) {\n",
       "        el.textContent = \"BokehJS \" + root.Bokeh.version + \" successfully loaded.\";\n",
       "      }\n",
       "    } else if (Date.now() < root._bokeh_timeout) {\n",
       "      setTimeout(display_loaded, 100)\n",
       "    }\n",
       "  }\n",
       "\n",
       "\n",
       "  function run_callbacks() {\n",
       "    try {\n",
       "      root._bokeh_onload_callbacks.forEach(function(callback) {\n",
       "        if (callback != null)\n",
       "          callback();\n",
       "      });\n",
       "    } finally {\n",
       "      delete root._bokeh_onload_callbacks\n",
       "    }\n",
       "    console.debug(\"Bokeh: all callbacks have finished\");\n",
       "  }\n",
       "\n",
       "  function load_libs(css_urls, js_urls, callback) {\n",
       "    if (css_urls == null) css_urls = [];\n",
       "    if (js_urls == null) js_urls = [];\n",
       "\n",
       "    root._bokeh_onload_callbacks.push(callback);\n",
       "    if (root._bokeh_is_loading > 0) {\n",
       "      console.debug(\"Bokeh: BokehJS is being loaded, scheduling callback at\", now());\n",
       "      return null;\n",
       "    }\n",
       "    if (js_urls == null || js_urls.length === 0) {\n",
       "      run_callbacks();\n",
       "      return null;\n",
       "    }\n",
       "    console.debug(\"Bokeh: BokehJS not loaded, scheduling load and callback at\", now());\n",
       "    root._bokeh_is_loading = css_urls.length + js_urls.length;\n",
       "\n",
       "    function on_load() {\n",
       "      root._bokeh_is_loading--;\n",
       "      if (root._bokeh_is_loading === 0) {\n",
       "        console.debug(\"Bokeh: all BokehJS libraries/stylesheets loaded\");\n",
       "        run_callbacks()\n",
       "      }\n",
       "    }\n",
       "\n",
       "    function on_error() {\n",
       "      console.error(\"failed to load \" + url);\n",
       "    }\n",
       "\n",
       "    for (var i = 0; i < css_urls.length; i++) {\n",
       "      var url = css_urls[i];\n",
       "      const element = document.createElement(\"link\");\n",
       "      element.onload = on_load;\n",
       "      element.onerror = on_error;\n",
       "      element.rel = \"stylesheet\";\n",
       "      element.type = \"text/css\";\n",
       "      element.href = url;\n",
       "      console.debug(\"Bokeh: injecting link tag for BokehJS stylesheet: \", url);\n",
       "      document.body.appendChild(element);\n",
       "    }\n",
       "\n",
       "    const hashes = {\"https://cdn.bokeh.org/bokeh/release/bokeh-2.2.3.min.js\": \"T2yuo9Oe71Cz/I4X9Ac5+gpEa5a8PpJCDlqKYO0CfAuEszu1JrXLl8YugMqYe3sM\", \"https://cdn.bokeh.org/bokeh/release/bokeh-widgets-2.2.3.min.js\": \"98GDGJ0kOMCUMUePhksaQ/GYgB3+NH9h996V88sh3aOiUNX3N+fLXAtry6xctSZ6\", \"https://cdn.bokeh.org/bokeh/release/bokeh-tables-2.2.3.min.js\": \"89bArO+nlbP3sgakeHjCo1JYxYR5wufVgA3IbUvDY+K7w4zyxJqssu7wVnfeKCq8\"};\n",
       "\n",
       "    for (var i = 0; i < js_urls.length; i++) {\n",
       "      var url = js_urls[i];\n",
       "      var element = document.createElement('script');\n",
       "      element.onload = on_load;\n",
       "      element.onerror = on_error;\n",
       "      element.async = false;\n",
       "      element.src = url;\n",
       "      if (url in hashes) {\n",
       "        element.crossOrigin = \"anonymous\";\n",
       "        element.integrity = \"sha384-\" + hashes[url];\n",
       "      }\n",
       "      console.debug(\"Bokeh: injecting script tag for BokehJS library: \", url);\n",
       "      document.head.appendChild(element);\n",
       "    }\n",
       "  };\n",
       "\n",
       "  function inject_raw_css(css) {\n",
       "    const element = document.createElement(\"style\");\n",
       "    element.appendChild(document.createTextNode(css));\n",
       "    document.body.appendChild(element);\n",
       "  }\n",
       "\n",
       "  \n",
       "  var js_urls = [\"https://cdn.bokeh.org/bokeh/release/bokeh-2.2.3.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-widgets-2.2.3.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-tables-2.2.3.min.js\"];\n",
       "  var css_urls = [];\n",
       "  \n",
       "\n",
       "  var inline_js = [\n",
       "    function(Bokeh) {\n",
       "      Bokeh.set_log_level(\"info\");\n",
       "    },\n",
       "    function(Bokeh) {\n",
       "    \n",
       "    \n",
       "    }\n",
       "  ];\n",
       "\n",
       "  function run_inline_js() {\n",
       "    \n",
       "    if (root.Bokeh !== undefined || force === true) {\n",
       "      \n",
       "    for (var i = 0; i < inline_js.length; i++) {\n",
       "      inline_js[i].call(root, root.Bokeh);\n",
       "    }\n",
       "    if (force === true) {\n",
       "        display_loaded();\n",
       "      }} else if (Date.now() < root._bokeh_timeout) {\n",
       "      setTimeout(run_inline_js, 100);\n",
       "    } else if (!root._bokeh_failed_load) {\n",
       "      console.log(\"Bokeh: BokehJS failed to load within specified timeout.\");\n",
       "      root._bokeh_failed_load = true;\n",
       "    } else if (force !== true) {\n",
       "      var cell = $(document.getElementById(\"2387\")).parents('.cell').data().cell;\n",
       "      cell.output_area.append_execute_result(NB_LOAD_WARNING)\n",
       "    }\n",
       "\n",
       "  }\n",
       "\n",
       "  if (root._bokeh_is_loading === 0) {\n",
       "    console.debug(\"Bokeh: BokehJS loaded, going straight to plotting\");\n",
       "    run_inline_js();\n",
       "  } else {\n",
       "    load_libs(css_urls, js_urls, function() {\n",
       "      console.debug(\"Bokeh: BokehJS plotting callback run at\", now());\n",
       "      run_inline_js();\n",
       "    });\n",
       "  }\n",
       "}(window));"
      ],
      "application/vnd.bokehjs_load.v0+json": "\n(function(root) {\n  function now() {\n    return new Date();\n  }\n\n  var force = true;\n\n  if (typeof root._bokeh_onload_callbacks === \"undefined\" || force === true) {\n    root._bokeh_onload_callbacks = [];\n    root._bokeh_is_loading = undefined;\n  }\n\n  \n\n  \n  if (typeof (root._bokeh_timeout) === \"undefined\" || force === true) {\n    root._bokeh_timeout = Date.now() + 5000;\n    root._bokeh_failed_load = false;\n  }\n\n  var NB_LOAD_WARNING = {'data': {'text/html':\n     \"<div style='background-color: #fdd'>\\n\"+\n     \"<p>\\n\"+\n     \"BokehJS does not appear to have successfully loaded. If loading BokehJS from CDN, this \\n\"+\n     \"may be due to a slow or bad network connection. Possible fixes:\\n\"+\n     \"</p>\\n\"+\n     \"<ul>\\n\"+\n     \"<li>re-rerun `output_notebook()` to attempt to load from CDN again, or</li>\\n\"+\n     \"<li>use INLINE resources instead, as so:</li>\\n\"+\n     \"</ul>\\n\"+\n     \"<code>\\n\"+\n     \"from bokeh.resources import INLINE\\n\"+\n     \"output_notebook(resources=INLINE)\\n\"+\n     \"</code>\\n\"+\n     \"</div>\"}};\n\n  function display_loaded() {\n    var el = document.getElementById(\"2387\");\n    if (el != null) {\n      el.textContent = \"BokehJS is loading...\";\n    }\n    if (root.Bokeh !== undefined) {\n      if (el != null) {\n        el.textContent = \"BokehJS \" + root.Bokeh.version + \" successfully loaded.\";\n      }\n    } else if (Date.now() < root._bokeh_timeout) {\n      setTimeout(display_loaded, 100)\n    }\n  }\n\n\n  function run_callbacks() {\n    try {\n      root._bokeh_onload_callbacks.forEach(function(callback) {\n        if (callback != null)\n          callback();\n      });\n    } finally {\n      delete root._bokeh_onload_callbacks\n    }\n    console.debug(\"Bokeh: all callbacks have finished\");\n  }\n\n  function load_libs(css_urls, js_urls, callback) {\n    if (css_urls == null) css_urls = [];\n    if (js_urls == null) js_urls = [];\n\n    root._bokeh_onload_callbacks.push(callback);\n    if (root._bokeh_is_loading > 0) {\n      console.debug(\"Bokeh: BokehJS is being loaded, scheduling callback at\", now());\n      return null;\n    }\n    if (js_urls == null || js_urls.length === 0) {\n      run_callbacks();\n      return null;\n    }\n    console.debug(\"Bokeh: BokehJS not loaded, scheduling load and callback at\", now());\n    root._bokeh_is_loading = css_urls.length + js_urls.length;\n\n    function on_load() {\n      root._bokeh_is_loading--;\n      if (root._bokeh_is_loading === 0) {\n        console.debug(\"Bokeh: all BokehJS libraries/stylesheets loaded\");\n        run_callbacks()\n      }\n    }\n\n    function on_error() {\n      console.error(\"failed to load \" + url);\n    }\n\n    for (var i = 0; i < css_urls.length; i++) {\n      var url = css_urls[i];\n      const element = document.createElement(\"link\");\n      element.onload = on_load;\n      element.onerror = on_error;\n      element.rel = \"stylesheet\";\n      element.type = \"text/css\";\n      element.href = url;\n      console.debug(\"Bokeh: injecting link tag for BokehJS stylesheet: \", url);\n      document.body.appendChild(element);\n    }\n\n    const hashes = {\"https://cdn.bokeh.org/bokeh/release/bokeh-2.2.3.min.js\": \"T2yuo9Oe71Cz/I4X9Ac5+gpEa5a8PpJCDlqKYO0CfAuEszu1JrXLl8YugMqYe3sM\", \"https://cdn.bokeh.org/bokeh/release/bokeh-widgets-2.2.3.min.js\": \"98GDGJ0kOMCUMUePhksaQ/GYgB3+NH9h996V88sh3aOiUNX3N+fLXAtry6xctSZ6\", \"https://cdn.bokeh.org/bokeh/release/bokeh-tables-2.2.3.min.js\": \"89bArO+nlbP3sgakeHjCo1JYxYR5wufVgA3IbUvDY+K7w4zyxJqssu7wVnfeKCq8\"};\n\n    for (var i = 0; i < js_urls.length; i++) {\n      var url = js_urls[i];\n      var element = document.createElement('script');\n      element.onload = on_load;\n      element.onerror = on_error;\n      element.async = false;\n      element.src = url;\n      if (url in hashes) {\n        element.crossOrigin = \"anonymous\";\n        element.integrity = \"sha384-\" + hashes[url];\n      }\n      console.debug(\"Bokeh: injecting script tag for BokehJS library: \", url);\n      document.head.appendChild(element);\n    }\n  };\n\n  function inject_raw_css(css) {\n    const element = document.createElement(\"style\");\n    element.appendChild(document.createTextNode(css));\n    document.body.appendChild(element);\n  }\n\n  \n  var js_urls = [\"https://cdn.bokeh.org/bokeh/release/bokeh-2.2.3.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-widgets-2.2.3.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-tables-2.2.3.min.js\"];\n  var css_urls = [];\n  \n\n  var inline_js = [\n    function(Bokeh) {\n      Bokeh.set_log_level(\"info\");\n    },\n    function(Bokeh) {\n    \n    \n    }\n  ];\n\n  function run_inline_js() {\n    \n    if (root.Bokeh !== undefined || force === true) {\n      \n    for (var i = 0; i < inline_js.length; i++) {\n      inline_js[i].call(root, root.Bokeh);\n    }\n    if (force === true) {\n        display_loaded();\n      }} else if (Date.now() < root._bokeh_timeout) {\n      setTimeout(run_inline_js, 100);\n    } else if (!root._bokeh_failed_load) {\n      console.log(\"Bokeh: BokehJS failed to load within specified timeout.\");\n      root._bokeh_failed_load = true;\n    } else if (force !== true) {\n      var cell = $(document.getElementById(\"2387\")).parents('.cell').data().cell;\n      cell.output_area.append_execute_result(NB_LOAD_WARNING)\n    }\n\n  }\n\n  if (root._bokeh_is_loading === 0) {\n    console.debug(\"Bokeh: BokehJS loaded, going straight to plotting\");\n    run_inline_js();\n  } else {\n    load_libs(css_urls, js_urls, function() {\n      console.debug(\"Bokeh: BokehJS plotting callback run at\", now());\n      run_inline_js();\n    });\n  }\n}(window));"
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "\n",
       "\n",
       "\n",
       "\n",
       "\n",
       "  <div class=\"bk-root\" id=\"a63257b7-0074-40b9-a600-7160f70db6c7\" data-root-id=\"2388\"></div>\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/javascript": [
       "(function(root) {\n",
       "  function embed_document(root) {\n",
       "    \n",
       "  var docs_json = {\"d87695ec-e606-4c70-926c-3a38dff75b86\":{\"roots\":{\"references\":[{\"attributes\":{\"below\":[{\"id\":\"2399\"}],\"center\":[{\"id\":\"2402\"},{\"id\":\"2406\"},{\"id\":\"2446\"}],\"left\":[{\"id\":\"2403\"}],\"renderers\":[{\"id\":\"2424\"}],\"title\":{\"id\":\"2389\"},\"toolbar\":{\"id\":\"2414\"},\"x_range\":{\"id\":\"2391\"},\"x_scale\":{\"id\":\"2395\"},\"y_range\":{\"id\":\"2393\"},\"y_scale\":{\"id\":\"2397\"}},\"id\":\"2388\",\"subtype\":\"Figure\",\"type\":\"Plot\"},{\"attributes\":{\"months\":[0,6]},\"id\":\"2444\",\"type\":\"MonthsTicker\"},{\"attributes\":{\"active_drag\":\"auto\",\"active_inspect\":\"auto\",\"active_multi\":null,\"active_scroll\":\"auto\",\"active_tap\":\"auto\",\"tools\":[{\"id\":\"2407\"},{\"id\":\"2408\"},{\"id\":\"2409\"},{\"id\":\"2410\"},{\"id\":\"2411\"},{\"id\":\"2412\"}]},\"id\":\"2414\",\"type\":\"Toolbar\"},{\"attributes\":{},\"id\":\"2397\",\"type\":\"LinearScale\"},{\"attributes\":{\"label\":{\"value\":\"Olist Order Quantity\"},\"renderers\":[{\"id\":\"2424\"}]},\"id\":\"2447\",\"type\":\"LegendItem\"},{\"attributes\":{},\"id\":\"2411\",\"type\":\"ResetTool\"},{\"attributes\":{},\"id\":\"2431\",\"type\":\"Selection\"},{\"attributes\":{\"days\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]},\"id\":\"2437\",\"type\":\"DaysTicker\"},{\"attributes\":{\"source\":{\"id\":\"2421\"}},\"id\":\"2425\",\"type\":\"CDSView\"},{\"attributes\":{},\"id\":\"2432\",\"type\":\"UnionRenderers\"},{\"attributes\":{\"items\":[{\"id\":\"2447\"}],\"location\":\"top_left\"},\"id\":\"2446\",\"type\":\"Legend\"},{\"attributes\":{},\"id\":\"2410\",\"type\":\"SaveTool\"},{\"attributes\":{},\"id\":\"2427\",\"type\":\"BasicTickFormatter\"},{\"attributes\":{\"text\":\"Number of Orders Trend\"},\"id\":\"2389\",\"type\":\"Title\"},{\"attributes\":{\"months\":[0,4,8]},\"id\":\"2443\",\"type\":\"MonthsTicker\"},{\"attributes\":{\"axis\":{\"id\":\"2403\"},\"dimension\":1,\"grid_line_alpha\":0.3,\"ticker\":null},\"id\":\"2406\",\"type\":\"Grid\"},{\"attributes\":{\"base\":60,\"mantissas\":[1,2,5,10,15,20,30],\"max_interval\":1800000.0,\"min_interval\":1000.0,\"num_minor_ticks\":0},\"id\":\"2435\",\"type\":\"AdaptiveTicker\"},{\"attributes\":{},\"id\":\"2429\",\"type\":\"DatetimeTickFormatter\"},{\"attributes\":{\"mantissas\":[1,2,5],\"max_interval\":500.0,\"num_minor_ticks\":0},\"id\":\"2434\",\"type\":\"AdaptiveTicker\"},{\"attributes\":{\"axis_label\":\"Order Purchased on\",\"formatter\":{\"id\":\"2429\"},\"ticker\":{\"id\":\"2400\"}},\"id\":\"2399\",\"type\":\"DatetimeAxis\"},{\"attributes\":{},\"id\":\"2407\",\"type\":\"PanTool\"},{\"attributes\":{},\"id\":\"2395\",\"type\":\"LinearScale\"},{\"attributes\":{\"line_alpha\":0.1,\"line_color\":\"green\",\"x\":{\"field\":\"x\"},\"y\":{\"field\":\"y\"}},\"id\":\"2423\",\"type\":\"Line\"},{\"attributes\":{\"days\":[1,4,7,10,13,16,19,22,25,28]},\"id\":\"2438\",\"type\":\"DaysTicker\"},{\"attributes\":{},\"id\":\"2391\",\"type\":\"DataRange1d\"},{\"attributes\":{},\"id\":\"2412\",\"type\":\"HelpTool\"},{\"attributes\":{\"axis_label\":\"Quantity\",\"formatter\":{\"id\":\"2427\"},\"ticker\":{\"id\":\"2404\"}},\"id\":\"2403\",\"type\":\"LinearAxis\"},{\"attributes\":{},\"id\":\"2393\",\"type\":\"DataRange1d\"},{\"attributes\":{\"days\":[1,15]},\"id\":\"2440\",\"type\":\"DaysTicker\"},{\"attributes\":{\"num_minor_ticks\":5,\"tickers\":[{\"id\":\"2434\"},{\"id\":\"2435\"},{\"id\":\"2436\"},{\"id\":\"2437\"},{\"id\":\"2438\"},{\"id\":\"2439\"},{\"id\":\"2440\"},{\"id\":\"2441\"},{\"id\":\"2442\"},{\"id\":\"2443\"},{\"id\":\"2444\"},{\"id\":\"2445\"}]},\"id\":\"2400\",\"type\":\"DatetimeTicker\"},{\"attributes\":{\"months\":[0,1,2,3,4,5,6,7,8,9,10,11]},\"id\":\"2441\",\"type\":\"MonthsTicker\"},{\"attributes\":{\"axis\":{\"id\":\"2399\"},\"grid_line_alpha\":0.3,\"ticker\":null},\"id\":\"2402\",\"type\":\"Grid\"},{\"attributes\":{\"base\":24,\"mantissas\":[1,2,4,6,8,12],\"max_interval\":43200000.0,\"min_interval\":3600000.0,\"num_minor_ticks\":0},\"id\":\"2436\",\"type\":\"AdaptiveTicker\"},{\"attributes\":{\"months\":[0,2,4,6,8,10]},\"id\":\"2442\",\"type\":\"MonthsTicker\"},{\"attributes\":{\"data\":{\"x\":{\"__ndarray__\":\"AAAA6idvdUIAAMBPem91QgAAwH0NcnVCAABASbJydUIAAAALK3h1QgAAwHB9eHVCAACA1s94dUIAAEA8Inl1QgAAAKJ0eXVCAADAB8d5dUIAAIBtGXp1QgAAQNNrenVCAAAAOb56dUIAAAD+mn51QgAAgKKPknVCAABAzb6WdUIAAAAzEZd1QgAAwJhjl3VCAACA/rWXdUIAAEBkCJh1QgAAAMpamHVCAADAL62YdUIAAICV/5h1QgAAQPtRmXVCAAAAYaSZdUIAAMDG9pl1QgAAgCxJmnVCAABAkpuadUIAAAD47Zp1QgAAwF1Am3VCAACAw5KbdUIAAEAp5Zt1QgAAAI83nHVCAADA9ImcdUIAAIBa3Jx1QgAAQMAunXVCAAAAJoGddUIAAMCL0511QgAAgPElnnVCAABAV3iedUIAAAC9yp51QgAAwCIdn3VCAACAiG+fdUIAAEDuwZ91QgAAAFQUoHVCAADAuWagdUIAAIAfuaB1QgAAQIULoXVCAAAA612hdUIAAMBQsKF1QgAAgLYConVCAABAHFWidUIAAACCp6J1QgAAwOf5onVCAACATUyjdUIAAECznqN1QgAAABnxo3VCAADAfkOkdUIAAIDklaR1QgAAQEropHVCAAAAsDqldUIAAMAVjaV1QgAAgHvfpXVCAABA4TGmdUIAAABHhKZ1QgAAwKzWpnVCAACAEimndUIAAEB4e6d1QgAAAN7Np3VCAADAQyCodUIAAICpcqh1QgAAQA/FqHVCAAAAdRepdUIAAMDaaal1QgAAgEC8qXVCAABApg6qdUIAAAAMYap1QgAAwHGzqnVCAACA1wWrdUIAAEA9WKt1QgAAAKOqq3VCAADACP2rdUIAAIBuT6x1QgAAQNShrHVCAAAAOvSsdUIAAMCfRq11QgAAgAWZrXVCAABAa+utdUIAAADRPa51QgAAwDaQrnVCAACAnOKudUIAAEACNa91QgAAAGiHr3VCAADAzdmvdUIAAIAzLLB1QgAAQJl+sHVCAAAA/9CwdUIAAMBkI7F1QgAAgMp1sXVCAABAMMixdUIAAACWGrJ1QgAAwPtssnVCAACAYb+ydUIAAEDHEbN1QgAAAC1ks3VCAADAkrazdUIAAID4CLR1QgAAQF5btHVCAAAAxK20dUIAAMApALV1QgAAgI9StXVCAABA9aS1dUIAAABb97V1QgAAwMBJtnVCAACAJpy2dUIAAECM7rZ1QgAAAPJAt3VCAADAV5O3dUIAAIC95bd1QgAAQCM4uHVCAAAAiYq4dUIAAMDu3Lh1QgAAgFQvuXVCAABAuoG5dUIAAAAg1Ll1QgAAwIUmunVCAACA63i6dUIAAEBRy7p1QgAAALcdu3VCAADAHHC7dUIAAICCwrt1QgAAQOgUvHVCAAAATme8dUIAAMCzubx1QgAAgBkMvXVCAABAf169dUIAAADlsL11QgAAwEoDvnVCAACAsFW+dUIAAEAWqL51QgAAAHz6vnVCAADA4Uy/dUIAAIBHn791QgAAQK3xv3VCAAAAE0TAdUIAAMB4lsB1QgAAgN7owHVCAABARDvBdUIAAACqjcF1QgAAwA/gwXVCAACAdTLCdUIAAEDbhMJ1QgAAAEHXwnVCAADApinDdUIAAIAMfMN1QgAAQHLOw3VCAAAA2CDEdUIAAMA9c8R1QgAAgKPFxHVCAABACRjFdUIAAABvasV1QgAAwNS8xXVCAACAOg/GdUIAAECgYcZ1QgAAAAa0xnVCAADAawbHdUIAAIDRWMd1QgAAQDerx3VCAAAAnf3HdUIAAMACUMh1QgAAgGiiyHVCAABAzvTIdUIAAAA0R8l1QgAAwJmZyXVCAACA/+vJdUIAAEBlPsp1QgAAAMuQynVCAADAMOPKdUIAAICWNct1QgAAQPyHy3VCAAAAYtrLdUIAAMDHLMx1QgAAgC1/zHVCAABAk9HMdUIAAAD5I811QgAAwF52zXVCAACAxMjNdUIAAEAqG851QgAAAJBtznVCAADA9b/OdUIAAIBbEs91QgAAQMFkz3VCAAAAJ7fPdUIAAMCMCdB1QgAAgPJb0HVCAABAWK7QdUIAAAC+ANF1QgAAwCNT0XVCAACAiaXRdUIAAEDv99F1QgAAAFVK0nVCAADAupzSdUIAAIAg79J1QgAAQIZB03VCAAAA7JPTdUIAAMBR5tN1QgAAgLc41HVCAABAHYvUdUIAAACD3dR1QgAAwOgv1XVCAACAToLVdUIAAEC01NV1QgAAABon1nVCAADAf3nWdUIAAIDly9Z1QgAAQEse13VCAAAAsXDXdUIAAMAWw9d1QgAAgHwV2HVCAABA4mfYdUIAAABIuth1QgAAwK0M2XVCAACAE1/ZdUIAAEB5sdl1QgAAAN8D2nVCAADARFbadUIAAICqqNp1QgAAQBD72nVCAAAAdk3bdUIAAMDbn9t1QgAAgEHy23VCAABAp0TcdUIAAAANl9x1QgAAwHLp3HVCAACA2DvddUIAAEA+jt11QgAAAKTg3XVCAADACTPedUIAAIBvhd51QgAAQNXX3nVCAAAAOyrfdUIAAMCgfN91QgAAgAbP33VCAABAbCHgdUIAAADSc+B1QgAAwDfG4HVCAACAnRjhdUIAAEADa+F1QgAAAGm94XVCAADAzg/idUIAAIA0YuJ1QgAAQJq04nVCAAAAAAfjdUIAAMBlWeN1QgAAgMur43VCAABAMf7jdUIAAACXUOR1QgAAwPyi5HVCAACAYvXkdUIAAEDIR+V1QgAAAC6a5XVCAADAk+zldUIAAID5PuZ1QgAAQF+R5nVCAAAAxePmdUIAAMAqNud1QgAAgJCI53VCAABA9trndUIAAABcLeh1QgAAwMF/6HVCAACAJ9LodUIAAECNJOl1QgAAAPN26XVCAADAWMnpdUIAAIC+G+p1QgAAQCRu6nVCAAAAisDqdUIAAMDvEut1QgAAgFVl63VCAABAu7frdUIAAAAhCux1QgAAwIZc7HVCAACA7K7sdUIAAEBSAe11QgAAALhT7XVCAADAHabtdUIAAICD+O11QgAAQOlK7nVCAAAAT53udUIAAMC07+51QgAAgBpC73VCAABAgJTvdUIAAADm5u91QgAAwEs58HVCAACAsYvwdUIAAEAX3vB1QgAAAH0w8XVCAADA4oLxdUIAAIBI1fF1QgAAQK4n8nVCAAAAFHrydUIAAMB5zPJ1QgAAgN8e83VCAABARXHzdUIAAACrw/N1QgAAwBAW9HVCAACAdmj0dUIAAEDcuvR1QgAAAEIN9XVCAADAp1/1dUIAAIANsvV1QgAAQHME9nVCAAAA2Vb2dUIAAMA+qfZ1QgAAgKT79nVCAABACk73dUIAAABwoPd1QgAAwNXy93VCAACAO0X4dUIAAEChl/h1QgAAAAfq+HVCAADAbDz5dUIAAIDSjvl1QgAAQDjh+XVCAAAAnjP6dUIAAMADhvp1QgAAgGnY+nVCAABAzyr7dUIAAAA1fft1QgAAwJrP+3VCAACAACL8dUIAAEBmdPx1QgAAAMzG/HVCAADAMRn9dUIAAICXa/11QgAAQP29/XVCAAAAYxD+dUIAAMDIYv51QgAAgC61/nVCAABAlAf/dUIAAAD6Wf91QgAAwF+s/3VCAACAxf7/dUIAAEArUQB2QgAAAJGjAHZCAADA9vUAdkIAAIBcSAF2QgAAQMKaAXZCAAAAKO0BdkIAAMCNPwJ2QgAAgPORAnZCAABAWeQCdkIAAAC/NgN2QgAAwCSJA3ZCAACAitsDdkIAAEDwLQR2QgAAAFaABHZCAADAu9IEdkIAAIAhJQV2QgAAQId3BXZCAAAA7ckFdkIAAMBSHAZ2QgAAgLhuBnZCAABAHsEGdkIAAACEEwd2QgAAwOllB3ZCAACAT7gHdkIAAEC1Cgh2QgAAABtdCHZCAADAgK8IdkIAAIDmAQl2QgAAQExUCXZCAAAAsqYJdkIAAMAX+Ql2QgAAgH1LCnZCAABA450KdkIAAABJ8Ap2QgAAwK5CC3ZCAACAFJULdkIAAEB65wt2QgAAAOA5DHZCAADARYwMdkIAAICr3gx2QgAAQBExDXZCAAAAd4MNdkIAAMDc1Q12QgAAgEIoDnZCAABAqHoOdkIAAAAOzQ52QgAAwHMfD3ZCAACA2XEPdkIAAEA/xA92QgAAAKUWEHZCAADACmkQdkIAAIBwuxB2QgAAQNYNEXZCAAAAPGARdkIAAMChshF2QgAAgAcFEnZCAABAbVcSdkIAAADTqRJ2QgAAwDj8EnZCAACAnk4TdkIAAEAEoRN2QgAAAGrzE3ZCAADAz0UUdkIAAIA1mBR2QgAAQJvqFHZCAAAAAT0VdkIAAMBmjxV2QgAAgMzhFXZCAABAMjQWdkIAAACYhhZ2QgAAwP3YFnZCAACAYysXdkIAAEDJfRd2QgAAAC/QF3ZCAADAlCIYdkIAAID6dBh2QgAAQGDHGHZCAAAAxhkZdkIAAMArbBl2QgAAgJG+GXZCAABA9xAadkIAAABdYxp2QgAAwMK1GnZCAACAKAgbdkIAAECOWht2QgAAAPSsG3ZCAADAWf8bdkIAAIC/URx2QgAAQCWkHHZCAAAAi/YcdkIAAMDwSB12QgAAgFabHXZCAABAvO0ddkIAAAAiQB52QgAAwIeSHnZCAACA7eQedkIAAEBTNx92QgAAALmJH3ZCAADAHtwfdkIAAICELiB2QgAAQOqAIHZCAAAAUNMgdkIAAMC1JSF2QgAAgBt4IXZCAABAgcohdkIAAADnHCJ2QgAAwExvInZCAACAssEidkIAAEAYFCN2QgAAAH5mI3ZCAADA47gjdkIAAIBJCyR2QgAAQK9dJHZCAAAAFbAkdkIAAMB6AiV2QgAAgOBUJXZCAABARqcldkIAAACs+SV2QgAAwBFMJnZCAACAd54mdkIAAEDd8CZ2QgAAAENDJ3ZCAADAqJUndkIAAIAO6Cd2QgAAQHQ6KHZCAAAA2owodkIAAMA/3yh2QgAAgKUxKXZCAABAC4QpdkIAAABx1il2QgAAwNYoKnZCAACAPHsqdkIAAECizSp2QgAAAAggK3ZCAADAbXIrdkIAAIDTxCt2QgAAQDkXLHZCAAAAn2ksdkIAAMAEvCx2QgAAgGoOLXZCAABA0GAtdkIAAAA2sy12QgAAwJsFLnZCAACAAVgudkIAAEBnqi52QgAAAM38LnZCAADAMk8vdkIAAICYoS92QgAAQP7zL3ZCAAAAZEYwdkIAAMDJmDB2QgAAgC/rMHZCAABAlT0xdkIAAAD7jzF2QgAAwGDiMXZCAACAxjQydkIAAEAshzJ2QgAAAJLZMnZCAADA9yszdkIAAIBdfjN2QgAAQMPQM3ZCAAAAKSM0dkIAAMCOdTR2QgAAgPTHNHZCAABAWho1dkIAAADAbDV2QgAAwCW/NXZCAACAixE2dkIAAEDxYzZ2QgAAAFe2NnZCAADAvAg3dkIAAIAiWzd2QgAAQIitN3ZCAAAA7v83dkIAAMBTUjh2QgAAgLmkOHZCAABAH/c4dkIAAACFSTl2QgAAwOqbOXZCAACAUO45dkIAAEC2QDp2QgAAAByTOnZCAADAgeU6dkIAAIDnNzt2QgAAQE2KO3ZCAAAAs9w7dkIAAMAYLzx2QgAAgH6BPHZCAABA5NM8dkIAAABKJj12QgAAwK94PXZCAACAFcs9dkIAAEB7HT52QgAAAOFvPnZCAADARsI+dkIAAICsFD92QgAAQBJnP3ZCAAAAeLk/dkIAAMDdC0B2QgAAgENeQHZCAABAqbBAdkIAAAAPA0F2QgAAwHRVQXZCAACA2qdBdkIAAEBA+kF2QgAAAKZMQnZCAADAC59CdkIAAIBx8UJ2QgAAQNdDQ3ZCAAAAPZZDdkIAAMCi6EN2QgAAgAg7RHZCAABAbo1EdkIAAADU30R2QgAAwDkyRXZCAACAn4RFdkIAAEAF10V2QgAAAGspRnZCAADA0HtGdkIAAIA2zkZ2QgAAQJwgR3ZCAAAAAnNHdkIAAMBnxUd2QgAAgM0XSHZCAABAM2pIdkIAAACZvEh2QgAAwP4OSXZCAACAZGFJdkIAAEDKs0l2QgAAADAGSnZCAADAlVhKdkIAAID7qkp2QgAAQGH9SnZCAAAAx09LdkIAAMAsokt2QgAAgJL0S3ZCAABA+EZMdkIAAABemUx2QgAAwMPrTHZCAACAKT5NdkIAAECPkE12QgAAAPXiTXZCAADAWjVOdkIAAIDAh052QgAAQCbaTnZCAAAAjCxPdkIAAMDxfk92QgAAgFfRT3ZCAABAvSNQdkIAAAAjdlB2QgAAwIjIUHZCAACA7hpRdkIAAEBUbVF2QgAAALq/UXZCAADAHxJSdkIAAICFZFJ2QgAAQOu2UnZCAAAAUQlTdkIAAMC2W1N2QgAAgByuU3ZCAABAggBUdkIAAADoUlR2QgAAwE2lVHZCAACAs/dUdkIAAEAZSlV2QgAAAH+cVXZCAADA5O5VdkIAAIBKQVZ2QgAAQLCTVnZCAAAAFuZWdkIAAMB7OFd2QgAAgOGKV3ZCAABAR91XdkIAAACtL1h2QgAAwBKCWHZCAACAeNRYdkIAAMCpy1l2QgAAANvCWnZCAAAAcgxcdkIAAMDXXlx2QgAAgD2xXHZCAABAowNddkIAAEA6TV52QgAAgGtEX3ZCAABAaOBgdkIAAADOMmF2QgAAQP8pYnZCAADAys5idkIAAECWc2N2QgAAAMGiZ3ZCAADAJvVndkI=\",\"dtype\":\"float64\",\"order\":\"little\",\"shape\":[634]},\"y\":[1,1,1,1,1,8,63,47,51,46,42,26,39,1,1,32,4,4,6,5,6,12,13,12,18,14,19,32,33,29,29,24,31,39,40,63,86,62,29,35,53,70,73,69,60,67,75,85,112,95,77,66,49,64,78,76,62,55,46,54,40,63,41,63,59,64,43,46,43,55,99,72,74,80,74,105,82,79,93,88,71,64,111,99,108,103,65,73,56,119,97,105,114,79,76,64,111,103,74,74,70,68,65,72,96,96,96,85,68,73,87,78,63,60,54,52,49,65,71,97,98,68,84,88,115,111,125,80,98,74,68,117,128,103,109,111,109,111,124,128,116,126,115,73,112,157,153,141,125,144,72,148,148,125,142,108,80,83,98,160,105,129,124,127,89,102,147,134,129,137,108,77,115,126,126,131,108,97,75,90,156,94,35,88,107,76,105,72,141,120,114,95,80,108,118,125,145,154,121,84,94,143,165,153,137,149,98,114,168,192,153,142,115,88,105,162,153,124,124,132,115,117,148,165,157,148,142,115,109,157,146,144,157,141,98,96,159,194,174,158,147,108,104,177,138,112,128,123,93,119,155,137,181,149,158,104,125,150,157,140,99,116,106,136,180,206,207,166,150,129,126,183,154,163,150,138,88,118,136,180,147,143,121,109,128,143,198,157,140,130,105,126,193,185,158,143,154,116,121,195,202,179,176,124,113,158,161,164,156,144,133,88,132,149,160,111,124,143,111,144,193,160,175,191,165,159,174,205,192,186,226,197,149,158,230,228,201,283,1176,499,391,403,380,323,267,275,216,234,337,282,280,229,219,155,190,267,260,218,200,192,131,133,209,176,171,143,111,109,59,90,168,167,146,135,97,74,74,204,225,258,210,216,196,293,252,277,266,243,219,235,307,302,282,241,235,184,199,314,262,244,233,229,153,156,246,258,256,232,212,193,201,271,268,248,230,216,179,172,218,224,295,283,214,204,202,259,289,266,279,235,191,237,299,298,313,277,266,214,236,264,271,259,234,204,193,218,232,227,199,290,252,180,215,303,297,286,254,221,165,190,272,245,220,194,165,168,207,282,247,257,266,189,164,185,253,201,274,255,202,146,223,280,266,280,293,197,156,200,285,271,284,254,242,169,171,240,256,296,305,265,197,211,372,331,344,279,247,207,207,364,352,357,228,236,139,161,206,199,132,114,104,99,100,143,149,140,133,184,142,192,225,200,227,223,198,172,193,294,246,259,212,186,165,152,246,231,217,234,179,151,199,241,243,215,243,174,124,161,195,216,256,195,121,91,122,148,134,127,124,168,148,152,245,221,307,253,250,187,215,307,271,268,247,189,176,188,288,322,311,302,314,245,276,372,370,316,289,256,188,197,292,316,288,320,257,198,204,256,243,187,144,99,69,73,67,44,14,4,1,4,3,1,1,1,1,1,1,1,1,1,1,1,1,1]},\"selected\":{\"id\":\"2431\"},\"selection_policy\":{\"id\":\"2432\"}},\"id\":\"2421\",\"type\":\"ColumnDataSource\"},{\"attributes\":{},\"id\":\"2445\",\"type\":\"YearsTicker\"},{\"attributes\":{\"data_source\":{\"id\":\"2421\"},\"glyph\":{\"id\":\"2422\"},\"hover_glyph\":null,\"muted_glyph\":null,\"nonselection_glyph\":{\"id\":\"2423\"},\"selection_glyph\":null,\"view\":{\"id\":\"2425\"}},\"id\":\"2424\",\"type\":\"GlyphRenderer\"},{\"attributes\":{\"line_color\":\"green\",\"x\":{\"field\":\"x\"},\"y\":{\"field\":\"y\"}},\"id\":\"2422\",\"type\":\"Line\"},{\"attributes\":{},\"id\":\"2408\",\"type\":\"WheelZoomTool\"},{\"attributes\":{},\"id\":\"2404\",\"type\":\"BasicTicker\"},{\"attributes\":{\"days\":[1,8,15,22]},\"id\":\"2439\",\"type\":\"DaysTicker\"},{\"attributes\":{\"bottom_units\":\"screen\",\"fill_alpha\":0.5,\"fill_color\":\"lightgrey\",\"left_units\":\"screen\",\"level\":\"overlay\",\"line_alpha\":1.0,\"line_color\":\"black\",\"line_dash\":[4,4],\"line_width\":2,\"right_units\":\"screen\",\"top_units\":\"screen\"},\"id\":\"2413\",\"type\":\"BoxAnnotation\"},{\"attributes\":{\"overlay\":{\"id\":\"2413\"}},\"id\":\"2409\",\"type\":\"BoxZoomTool\"}],\"root_ids\":[\"2388\"]},\"title\":\"Bokeh Application\",\"version\":\"2.2.3\"}};\n",
       "  var render_items = [{\"docid\":\"d87695ec-e606-4c70-926c-3a38dff75b86\",\"root_ids\":[\"2388\"],\"roots\":{\"2388\":\"a63257b7-0074-40b9-a600-7160f70db6c7\"}}];\n",
       "  root.Bokeh.embed.embed_items_notebook(docs_json, render_items);\n",
       "\n",
       "  }\n",
       "  if (root.Bokeh !== undefined) {\n",
       "    embed_document(root);\n",
       "  } else {\n",
       "    var attempts = 0;\n",
       "    var timer = setInterval(function(root) {\n",
       "      if (root.Bokeh !== undefined) {\n",
       "        clearInterval(timer);\n",
       "        embed_document(root);\n",
       "      } else {\n",
       "        attempts++;\n",
       "        if (attempts > 100) {\n",
       "          clearInterval(timer);\n",
       "          console.log(\"Bokeh: ERROR: Unable to run BokehJS code because BokehJS library is missing\");\n",
       "        }\n",
       "      }\n",
       "    }, 10, root)\n",
       "  }\n",
       "})(window);"
      ],
      "application/vnd.bokehjs_exec.v0+json": ""
     },
     "metadata": {
      "application/vnd.bokehjs_exec.v0+json": {
       "id": "2388"
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from bokeh.plotting import figure, output_file, show\n",
    "from bokeh.io import output_notebook\n",
    "output_notebook()\n",
    "\n",
    "p1 = figure(x_axis_type=\"datetime\", title=\"Number of Orders Trend\")\n",
    "p1.grid.grid_line_alpha=0.3\n",
    "p1.xaxis.axis_label = 'Order Purchased on'\n",
    "p1.yaxis.axis_label = 'Quantity'\n",
    "p1.line(order_date.index, order_date['count'], color='green', legend_label='Olist Order Quantity')\n",
    "p1.legend.location = \"top_left\"\n",
    "\n",
    "show(p1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Olist Revenue Trend"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [],
   "source": [
    "ord_price = pay.merge(ord_cust,left_on='order_id',right_on='order_id')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [],
   "source": [
    "prices = pd.concat([ord_price['order_purchase_timestamp'], ord_price['payment_value']], axis=1, keys=['date', 'price'])\n",
    "prices = prices.groupby(prices['date'].dt.date).sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Kindly run the below cell to view the Bokeh Graph"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "    <div class=\"bk-root\">\n",
       "        <a href=\"https://bokeh.org\" target=\"_blank\" class=\"bk-logo bk-logo-small bk-logo-notebook\"></a>\n",
       "        <span id=\"2688\">Loading BokehJS ...</span>\n",
       "    </div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/javascript": [
       "\n",
       "(function(root) {\n",
       "  function now() {\n",
       "    return new Date();\n",
       "  }\n",
       "\n",
       "  var force = true;\n",
       "\n",
       "  if (typeof root._bokeh_onload_callbacks === \"undefined\" || force === true) {\n",
       "    root._bokeh_onload_callbacks = [];\n",
       "    root._bokeh_is_loading = undefined;\n",
       "  }\n",
       "\n",
       "  var JS_MIME_TYPE = 'application/javascript';\n",
       "  var HTML_MIME_TYPE = 'text/html';\n",
       "  var EXEC_MIME_TYPE = 'application/vnd.bokehjs_exec.v0+json';\n",
       "  var CLASS_NAME = 'output_bokeh rendered_html';\n",
       "\n",
       "  /**\n",
       "   * Render data to the DOM node\n",
       "   */\n",
       "  function render(props, node) {\n",
       "    var script = document.createElement(\"script\");\n",
       "    node.appendChild(script);\n",
       "  }\n",
       "\n",
       "  /**\n",
       "   * Handle when an output is cleared or removed\n",
       "   */\n",
       "  function handleClearOutput(event, handle) {\n",
       "    var cell = handle.cell;\n",
       "\n",
       "    var id = cell.output_area._bokeh_element_id;\n",
       "    var server_id = cell.output_area._bokeh_server_id;\n",
       "    // Clean up Bokeh references\n",
       "    if (id != null && id in Bokeh.index) {\n",
       "      Bokeh.index[id].model.document.clear();\n",
       "      delete Bokeh.index[id];\n",
       "    }\n",
       "\n",
       "    if (server_id !== undefined) {\n",
       "      // Clean up Bokeh references\n",
       "      var cmd = \"from bokeh.io.state import curstate; print(curstate().uuid_to_server['\" + server_id + \"'].get_sessions()[0].document.roots[0]._id)\";\n",
       "      cell.notebook.kernel.execute(cmd, {\n",
       "        iopub: {\n",
       "          output: function(msg) {\n",
       "            var id = msg.content.text.trim();\n",
       "            if (id in Bokeh.index) {\n",
       "              Bokeh.index[id].model.document.clear();\n",
       "              delete Bokeh.index[id];\n",
       "            }\n",
       "          }\n",
       "        }\n",
       "      });\n",
       "      // Destroy server and session\n",
       "      var cmd = \"import bokeh.io.notebook as ion; ion.destroy_server('\" + server_id + \"')\";\n",
       "      cell.notebook.kernel.execute(cmd);\n",
       "    }\n",
       "  }\n",
       "\n",
       "  /**\n",
       "   * Handle when a new output is added\n",
       "   */\n",
       "  function handleAddOutput(event, handle) {\n",
       "    var output_area = handle.output_area;\n",
       "    var output = handle.output;\n",
       "\n",
       "    // limit handleAddOutput to display_data with EXEC_MIME_TYPE content only\n",
       "    if ((output.output_type != \"display_data\") || (!output.data.hasOwnProperty(EXEC_MIME_TYPE))) {\n",
       "      return\n",
       "    }\n",
       "\n",
       "    var toinsert = output_area.element.find(\".\" + CLASS_NAME.split(' ')[0]);\n",
       "\n",
       "    if (output.metadata[EXEC_MIME_TYPE][\"id\"] !== undefined) {\n",
       "      toinsert[toinsert.length - 1].firstChild.textContent = output.data[JS_MIME_TYPE];\n",
       "      // store reference to embed id on output_area\n",
       "      output_area._bokeh_element_id = output.metadata[EXEC_MIME_TYPE][\"id\"];\n",
       "    }\n",
       "    if (output.metadata[EXEC_MIME_TYPE][\"server_id\"] !== undefined) {\n",
       "      var bk_div = document.createElement(\"div\");\n",
       "      bk_div.innerHTML = output.data[HTML_MIME_TYPE];\n",
       "      var script_attrs = bk_div.children[0].attributes;\n",
       "      for (var i = 0; i < script_attrs.length; i++) {\n",
       "        toinsert[toinsert.length - 1].firstChild.setAttribute(script_attrs[i].name, script_attrs[i].value);\n",
       "        toinsert[toinsert.length - 1].firstChild.textContent = bk_div.children[0].textContent\n",
       "      }\n",
       "      // store reference to server id on output_area\n",
       "      output_area._bokeh_server_id = output.metadata[EXEC_MIME_TYPE][\"server_id\"];\n",
       "    }\n",
       "  }\n",
       "\n",
       "  function register_renderer(events, OutputArea) {\n",
       "\n",
       "    function append_mime(data, metadata, element) {\n",
       "      // create a DOM node to render to\n",
       "      var toinsert = this.create_output_subarea(\n",
       "        metadata,\n",
       "        CLASS_NAME,\n",
       "        EXEC_MIME_TYPE\n",
       "      );\n",
       "      this.keyboard_manager.register_events(toinsert);\n",
       "      // Render to node\n",
       "      var props = {data: data, metadata: metadata[EXEC_MIME_TYPE]};\n",
       "      render(props, toinsert[toinsert.length - 1]);\n",
       "      element.append(toinsert);\n",
       "      return toinsert\n",
       "    }\n",
       "\n",
       "    /* Handle when an output is cleared or removed */\n",
       "    events.on('clear_output.CodeCell', handleClearOutput);\n",
       "    events.on('delete.Cell', handleClearOutput);\n",
       "\n",
       "    /* Handle when a new output is added */\n",
       "    events.on('output_added.OutputArea', handleAddOutput);\n",
       "\n",
       "    /**\n",
       "     * Register the mime type and append_mime function with output_area\n",
       "     */\n",
       "    OutputArea.prototype.register_mime_type(EXEC_MIME_TYPE, append_mime, {\n",
       "      /* Is output safe? */\n",
       "      safe: true,\n",
       "      /* Index of renderer in `output_area.display_order` */\n",
       "      index: 0\n",
       "    });\n",
       "  }\n",
       "\n",
       "  // register the mime type if in Jupyter Notebook environment and previously unregistered\n",
       "  if (root.Jupyter !== undefined) {\n",
       "    var events = require('base/js/events');\n",
       "    var OutputArea = require('notebook/js/outputarea').OutputArea;\n",
       "\n",
       "    if (OutputArea.prototype.mime_types().indexOf(EXEC_MIME_TYPE) == -1) {\n",
       "      register_renderer(events, OutputArea);\n",
       "    }\n",
       "  }\n",
       "\n",
       "  \n",
       "  if (typeof (root._bokeh_timeout) === \"undefined\" || force === true) {\n",
       "    root._bokeh_timeout = Date.now() + 5000;\n",
       "    root._bokeh_failed_load = false;\n",
       "  }\n",
       "\n",
       "  var NB_LOAD_WARNING = {'data': {'text/html':\n",
       "     \"<div style='background-color: #fdd'>\\n\"+\n",
       "     \"<p>\\n\"+\n",
       "     \"BokehJS does not appear to have successfully loaded. If loading BokehJS from CDN, this \\n\"+\n",
       "     \"may be due to a slow or bad network connection. Possible fixes:\\n\"+\n",
       "     \"</p>\\n\"+\n",
       "     \"<ul>\\n\"+\n",
       "     \"<li>re-rerun `output_notebook()` to attempt to load from CDN again, or</li>\\n\"+\n",
       "     \"<li>use INLINE resources instead, as so:</li>\\n\"+\n",
       "     \"</ul>\\n\"+\n",
       "     \"<code>\\n\"+\n",
       "     \"from bokeh.resources import INLINE\\n\"+\n",
       "     \"output_notebook(resources=INLINE)\\n\"+\n",
       "     \"</code>\\n\"+\n",
       "     \"</div>\"}};\n",
       "\n",
       "  function display_loaded() {\n",
       "    var el = document.getElementById(\"2688\");\n",
       "    if (el != null) {\n",
       "      el.textContent = \"BokehJS is loading...\";\n",
       "    }\n",
       "    if (root.Bokeh !== undefined) {\n",
       "      if (el != null) {\n",
       "        el.textContent = \"BokehJS \" + root.Bokeh.version + \" successfully loaded.\";\n",
       "      }\n",
       "    } else if (Date.now() < root._bokeh_timeout) {\n",
       "      setTimeout(display_loaded, 100)\n",
       "    }\n",
       "  }\n",
       "\n",
       "\n",
       "  function run_callbacks() {\n",
       "    try {\n",
       "      root._bokeh_onload_callbacks.forEach(function(callback) {\n",
       "        if (callback != null)\n",
       "          callback();\n",
       "      });\n",
       "    } finally {\n",
       "      delete root._bokeh_onload_callbacks\n",
       "    }\n",
       "    console.debug(\"Bokeh: all callbacks have finished\");\n",
       "  }\n",
       "\n",
       "  function load_libs(css_urls, js_urls, callback) {\n",
       "    if (css_urls == null) css_urls = [];\n",
       "    if (js_urls == null) js_urls = [];\n",
       "\n",
       "    root._bokeh_onload_callbacks.push(callback);\n",
       "    if (root._bokeh_is_loading > 0) {\n",
       "      console.debug(\"Bokeh: BokehJS is being loaded, scheduling callback at\", now());\n",
       "      return null;\n",
       "    }\n",
       "    if (js_urls == null || js_urls.length === 0) {\n",
       "      run_callbacks();\n",
       "      return null;\n",
       "    }\n",
       "    console.debug(\"Bokeh: BokehJS not loaded, scheduling load and callback at\", now());\n",
       "    root._bokeh_is_loading = css_urls.length + js_urls.length;\n",
       "\n",
       "    function on_load() {\n",
       "      root._bokeh_is_loading--;\n",
       "      if (root._bokeh_is_loading === 0) {\n",
       "        console.debug(\"Bokeh: all BokehJS libraries/stylesheets loaded\");\n",
       "        run_callbacks()\n",
       "      }\n",
       "    }\n",
       "\n",
       "    function on_error() {\n",
       "      console.error(\"failed to load \" + url);\n",
       "    }\n",
       "\n",
       "    for (var i = 0; i < css_urls.length; i++) {\n",
       "      var url = css_urls[i];\n",
       "      const element = document.createElement(\"link\");\n",
       "      element.onload = on_load;\n",
       "      element.onerror = on_error;\n",
       "      element.rel = \"stylesheet\";\n",
       "      element.type = \"text/css\";\n",
       "      element.href = url;\n",
       "      console.debug(\"Bokeh: injecting link tag for BokehJS stylesheet: \", url);\n",
       "      document.body.appendChild(element);\n",
       "    }\n",
       "\n",
       "    const hashes = {\"https://cdn.bokeh.org/bokeh/release/bokeh-2.2.3.min.js\": \"T2yuo9Oe71Cz/I4X9Ac5+gpEa5a8PpJCDlqKYO0CfAuEszu1JrXLl8YugMqYe3sM\", \"https://cdn.bokeh.org/bokeh/release/bokeh-widgets-2.2.3.min.js\": \"98GDGJ0kOMCUMUePhksaQ/GYgB3+NH9h996V88sh3aOiUNX3N+fLXAtry6xctSZ6\", \"https://cdn.bokeh.org/bokeh/release/bokeh-tables-2.2.3.min.js\": \"89bArO+nlbP3sgakeHjCo1JYxYR5wufVgA3IbUvDY+K7w4zyxJqssu7wVnfeKCq8\"};\n",
       "\n",
       "    for (var i = 0; i < js_urls.length; i++) {\n",
       "      var url = js_urls[i];\n",
       "      var element = document.createElement('script');\n",
       "      element.onload = on_load;\n",
       "      element.onerror = on_error;\n",
       "      element.async = false;\n",
       "      element.src = url;\n",
       "      if (url in hashes) {\n",
       "        element.crossOrigin = \"anonymous\";\n",
       "        element.integrity = \"sha384-\" + hashes[url];\n",
       "      }\n",
       "      console.debug(\"Bokeh: injecting script tag for BokehJS library: \", url);\n",
       "      document.head.appendChild(element);\n",
       "    }\n",
       "  };\n",
       "\n",
       "  function inject_raw_css(css) {\n",
       "    const element = document.createElement(\"style\");\n",
       "    element.appendChild(document.createTextNode(css));\n",
       "    document.body.appendChild(element);\n",
       "  }\n",
       "\n",
       "  \n",
       "  var js_urls = [\"https://cdn.bokeh.org/bokeh/release/bokeh-2.2.3.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-widgets-2.2.3.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-tables-2.2.3.min.js\"];\n",
       "  var css_urls = [];\n",
       "  \n",
       "\n",
       "  var inline_js = [\n",
       "    function(Bokeh) {\n",
       "      Bokeh.set_log_level(\"info\");\n",
       "    },\n",
       "    function(Bokeh) {\n",
       "    \n",
       "    \n",
       "    }\n",
       "  ];\n",
       "\n",
       "  function run_inline_js() {\n",
       "    \n",
       "    if (root.Bokeh !== undefined || force === true) {\n",
       "      \n",
       "    for (var i = 0; i < inline_js.length; i++) {\n",
       "      inline_js[i].call(root, root.Bokeh);\n",
       "    }\n",
       "    if (force === true) {\n",
       "        display_loaded();\n",
       "      }} else if (Date.now() < root._bokeh_timeout) {\n",
       "      setTimeout(run_inline_js, 100);\n",
       "    } else if (!root._bokeh_failed_load) {\n",
       "      console.log(\"Bokeh: BokehJS failed to load within specified timeout.\");\n",
       "      root._bokeh_failed_load = true;\n",
       "    } else if (force !== true) {\n",
       "      var cell = $(document.getElementById(\"2688\")).parents('.cell').data().cell;\n",
       "      cell.output_area.append_execute_result(NB_LOAD_WARNING)\n",
       "    }\n",
       "\n",
       "  }\n",
       "\n",
       "  if (root._bokeh_is_loading === 0) {\n",
       "    console.debug(\"Bokeh: BokehJS loaded, going straight to plotting\");\n",
       "    run_inline_js();\n",
       "  } else {\n",
       "    load_libs(css_urls, js_urls, function() {\n",
       "      console.debug(\"Bokeh: BokehJS plotting callback run at\", now());\n",
       "      run_inline_js();\n",
       "    });\n",
       "  }\n",
       "}(window));"
      ],
      "application/vnd.bokehjs_load.v0+json": "\n(function(root) {\n  function now() {\n    return new Date();\n  }\n\n  var force = true;\n\n  if (typeof root._bokeh_onload_callbacks === \"undefined\" || force === true) {\n    root._bokeh_onload_callbacks = [];\n    root._bokeh_is_loading = undefined;\n  }\n\n  \n\n  \n  if (typeof (root._bokeh_timeout) === \"undefined\" || force === true) {\n    root._bokeh_timeout = Date.now() + 5000;\n    root._bokeh_failed_load = false;\n  }\n\n  var NB_LOAD_WARNING = {'data': {'text/html':\n     \"<div style='background-color: #fdd'>\\n\"+\n     \"<p>\\n\"+\n     \"BokehJS does not appear to have successfully loaded. If loading BokehJS from CDN, this \\n\"+\n     \"may be due to a slow or bad network connection. Possible fixes:\\n\"+\n     \"</p>\\n\"+\n     \"<ul>\\n\"+\n     \"<li>re-rerun `output_notebook()` to attempt to load from CDN again, or</li>\\n\"+\n     \"<li>use INLINE resources instead, as so:</li>\\n\"+\n     \"</ul>\\n\"+\n     \"<code>\\n\"+\n     \"from bokeh.resources import INLINE\\n\"+\n     \"output_notebook(resources=INLINE)\\n\"+\n     \"</code>\\n\"+\n     \"</div>\"}};\n\n  function display_loaded() {\n    var el = document.getElementById(\"2688\");\n    if (el != null) {\n      el.textContent = \"BokehJS is loading...\";\n    }\n    if (root.Bokeh !== undefined) {\n      if (el != null) {\n        el.textContent = \"BokehJS \" + root.Bokeh.version + \" successfully loaded.\";\n      }\n    } else if (Date.now() < root._bokeh_timeout) {\n      setTimeout(display_loaded, 100)\n    }\n  }\n\n\n  function run_callbacks() {\n    try {\n      root._bokeh_onload_callbacks.forEach(function(callback) {\n        if (callback != null)\n          callback();\n      });\n    } finally {\n      delete root._bokeh_onload_callbacks\n    }\n    console.debug(\"Bokeh: all callbacks have finished\");\n  }\n\n  function load_libs(css_urls, js_urls, callback) {\n    if (css_urls == null) css_urls = [];\n    if (js_urls == null) js_urls = [];\n\n    root._bokeh_onload_callbacks.push(callback);\n    if (root._bokeh_is_loading > 0) {\n      console.debug(\"Bokeh: BokehJS is being loaded, scheduling callback at\", now());\n      return null;\n    }\n    if (js_urls == null || js_urls.length === 0) {\n      run_callbacks();\n      return null;\n    }\n    console.debug(\"Bokeh: BokehJS not loaded, scheduling load and callback at\", now());\n    root._bokeh_is_loading = css_urls.length + js_urls.length;\n\n    function on_load() {\n      root._bokeh_is_loading--;\n      if (root._bokeh_is_loading === 0) {\n        console.debug(\"Bokeh: all BokehJS libraries/stylesheets loaded\");\n        run_callbacks()\n      }\n    }\n\n    function on_error() {\n      console.error(\"failed to load \" + url);\n    }\n\n    for (var i = 0; i < css_urls.length; i++) {\n      var url = css_urls[i];\n      const element = document.createElement(\"link\");\n      element.onload = on_load;\n      element.onerror = on_error;\n      element.rel = \"stylesheet\";\n      element.type = \"text/css\";\n      element.href = url;\n      console.debug(\"Bokeh: injecting link tag for BokehJS stylesheet: \", url);\n      document.body.appendChild(element);\n    }\n\n    const hashes = {\"https://cdn.bokeh.org/bokeh/release/bokeh-2.2.3.min.js\": \"T2yuo9Oe71Cz/I4X9Ac5+gpEa5a8PpJCDlqKYO0CfAuEszu1JrXLl8YugMqYe3sM\", \"https://cdn.bokeh.org/bokeh/release/bokeh-widgets-2.2.3.min.js\": \"98GDGJ0kOMCUMUePhksaQ/GYgB3+NH9h996V88sh3aOiUNX3N+fLXAtry6xctSZ6\", \"https://cdn.bokeh.org/bokeh/release/bokeh-tables-2.2.3.min.js\": \"89bArO+nlbP3sgakeHjCo1JYxYR5wufVgA3IbUvDY+K7w4zyxJqssu7wVnfeKCq8\"};\n\n    for (var i = 0; i < js_urls.length; i++) {\n      var url = js_urls[i];\n      var element = document.createElement('script');\n      element.onload = on_load;\n      element.onerror = on_error;\n      element.async = false;\n      element.src = url;\n      if (url in hashes) {\n        element.crossOrigin = \"anonymous\";\n        element.integrity = \"sha384-\" + hashes[url];\n      }\n      console.debug(\"Bokeh: injecting script tag for BokehJS library: \", url);\n      document.head.appendChild(element);\n    }\n  };\n\n  function inject_raw_css(css) {\n    const element = document.createElement(\"style\");\n    element.appendChild(document.createTextNode(css));\n    document.body.appendChild(element);\n  }\n\n  \n  var js_urls = [\"https://cdn.bokeh.org/bokeh/release/bokeh-2.2.3.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-widgets-2.2.3.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-tables-2.2.3.min.js\"];\n  var css_urls = [];\n  \n\n  var inline_js = [\n    function(Bokeh) {\n      Bokeh.set_log_level(\"info\");\n    },\n    function(Bokeh) {\n    \n    \n    }\n  ];\n\n  function run_inline_js() {\n    \n    if (root.Bokeh !== undefined || force === true) {\n      \n    for (var i = 0; i < inline_js.length; i++) {\n      inline_js[i].call(root, root.Bokeh);\n    }\n    if (force === true) {\n        display_loaded();\n      }} else if (Date.now() < root._bokeh_timeout) {\n      setTimeout(run_inline_js, 100);\n    } else if (!root._bokeh_failed_load) {\n      console.log(\"Bokeh: BokehJS failed to load within specified timeout.\");\n      root._bokeh_failed_load = true;\n    } else if (force !== true) {\n      var cell = $(document.getElementById(\"2688\")).parents('.cell').data().cell;\n      cell.output_area.append_execute_result(NB_LOAD_WARNING)\n    }\n\n  }\n\n  if (root._bokeh_is_loading === 0) {\n    console.debug(\"Bokeh: BokehJS loaded, going straight to plotting\");\n    run_inline_js();\n  } else {\n    load_libs(css_urls, js_urls, function() {\n      console.debug(\"Bokeh: BokehJS plotting callback run at\", now());\n      run_inline_js();\n    });\n  }\n}(window));"
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "\n",
       "\n",
       "\n",
       "\n",
       "\n",
       "  <div class=\"bk-root\" id=\"9a6ea5b1-df6f-4257-9845-2b29d5874c93\" data-root-id=\"2689\"></div>\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/javascript": [
       "(function(root) {\n",
       "  function embed_document(root) {\n",
       "    \n",
       "  var docs_json = {\"022d7889-a52a-4169-aa7d-9bd066aca113\":{\"roots\":{\"references\":[{\"attributes\":{\"below\":[{\"id\":\"2700\"}],\"center\":[{\"id\":\"2703\"},{\"id\":\"2707\"},{\"id\":\"2747\"}],\"left\":[{\"id\":\"2704\"}],\"renderers\":[{\"id\":\"2725\"}],\"title\":{\"id\":\"2690\"},\"toolbar\":{\"id\":\"2715\"},\"x_range\":{\"id\":\"2692\"},\"x_scale\":{\"id\":\"2696\"},\"y_range\":{\"id\":\"2694\"},\"y_scale\":{\"id\":\"2698\"}},\"id\":\"2689\",\"subtype\":\"Figure\",\"type\":\"Plot\"},{\"attributes\":{},\"id\":\"2708\",\"type\":\"PanTool\"},{\"attributes\":{\"mantissas\":[1,2,5],\"max_interval\":500.0,\"num_minor_ticks\":0},\"id\":\"2735\",\"type\":\"AdaptiveTicker\"},{\"attributes\":{\"line_alpha\":0.1,\"line_color\":\"Red\",\"x\":{\"field\":\"x\"},\"y\":{\"field\":\"y\"}},\"id\":\"2724\",\"type\":\"Line\"},{\"attributes\":{\"axis\":{\"id\":\"2704\"},\"dimension\":1,\"grid_line_alpha\":0.3,\"ticker\":null},\"id\":\"2707\",\"type\":\"Grid\"},{\"attributes\":{\"base\":24,\"mantissas\":[1,2,4,6,8,12],\"max_interval\":43200000.0,\"min_interval\":3600000.0,\"num_minor_ticks\":0},\"id\":\"2737\",\"type\":\"AdaptiveTicker\"},{\"attributes\":{\"months\":[0,1,2,3,4,5,6,7,8,9,10,11]},\"id\":\"2742\",\"type\":\"MonthsTicker\"},{\"attributes\":{\"text\":\"Olist Sales\"},\"id\":\"2690\",\"type\":\"Title\"},{\"attributes\":{},\"id\":\"2746\",\"type\":\"YearsTicker\"},{\"attributes\":{\"data\":{\"x\":{\"__ndarray__\":\"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\",\"dtype\":\"float64\",\"order\":\"little\",\"shape\":[633]},\"y\":{\"__ndarray__\":\"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\",\"dtype\":\"float64\",\"order\":\"little\",\"shape\":[633]}},\"selected\":{\"id\":\"2732\"},\"selection_policy\":{\"id\":\"2733\"}},\"id\":\"2722\",\"type\":\"ColumnDataSource\"},{\"attributes\":{},\"id\":\"2712\",\"type\":\"ResetTool\"},{\"attributes\":{\"base\":60,\"mantissas\":[1,2,5,10,15,20,30],\"max_interval\":1800000.0,\"min_interval\":1000.0,\"num_minor_ticks\":0},\"id\":\"2736\",\"type\":\"AdaptiveTicker\"},{\"attributes\":{\"active_drag\":\"auto\",\"active_inspect\":\"auto\",\"active_multi\":null,\"active_scroll\":\"auto\",\"active_tap\":\"auto\",\"tools\":[{\"id\":\"2708\"},{\"id\":\"2709\"},{\"id\":\"2710\"},{\"id\":\"2711\"},{\"id\":\"2712\"},{\"id\":\"2713\"}]},\"id\":\"2715\",\"type\":\"Toolbar\"},{\"attributes\":{\"days\":[1,8,15,22]},\"id\":\"2740\",\"type\":\"DaysTicker\"},{\"attributes\":{},\"id\":\"2694\",\"type\":\"DataRange1d\"},{\"attributes\":{},\"id\":\"2705\",\"type\":\"BasicTicker\"},{\"attributes\":{\"days\":[1,15]},\"id\":\"2741\",\"type\":\"DaysTicker\"},{\"attributes\":{\"bottom_units\":\"screen\",\"fill_alpha\":0.5,\"fill_color\":\"lightgrey\",\"left_units\":\"screen\",\"level\":\"overlay\",\"line_alpha\":1.0,\"line_color\":\"black\",\"line_dash\":[4,4],\"line_width\":2,\"right_units\":\"screen\",\"top_units\":\"screen\"},\"id\":\"2714\",\"type\":\"BoxAnnotation\"},{\"attributes\":{\"line_color\":\"Red\",\"x\":{\"field\":\"x\"},\"y\":{\"field\":\"y\"}},\"id\":\"2723\",\"type\":\"Line\"},{\"attributes\":{\"axis_label\":\"Order Purchased on\",\"formatter\":{\"id\":\"2730\"},\"ticker\":{\"id\":\"2701\"}},\"id\":\"2700\",\"type\":\"DatetimeAxis\"},{\"attributes\":{\"items\":[{\"id\":\"2748\"}],\"location\":\"top_left\"},\"id\":\"2747\",\"type\":\"Legend\"},{\"attributes\":{\"data_source\":{\"id\":\"2722\"},\"glyph\":{\"id\":\"2723\"},\"hover_glyph\":null,\"muted_glyph\":null,\"nonselection_glyph\":{\"id\":\"2724\"},\"selection_glyph\":null,\"view\":{\"id\":\"2726\"}},\"id\":\"2725\",\"type\":\"GlyphRenderer\"},{\"attributes\":{\"axis_label\":\"Price\",\"formatter\":{\"id\":\"2728\"},\"ticker\":{\"id\":\"2705\"}},\"id\":\"2704\",\"type\":\"LinearAxis\"},{\"attributes\":{\"months\":[0,2,4,6,8,10]},\"id\":\"2743\",\"type\":\"MonthsTicker\"},{\"attributes\":{\"months\":[0,6]},\"id\":\"2745\",\"type\":\"MonthsTicker\"},{\"attributes\":{},\"id\":\"2696\",\"type\":\"LinearScale\"},{\"attributes\":{\"label\":{\"value\":\"Revenue\"},\"renderers\":[{\"id\":\"2725\"}]},\"id\":\"2748\",\"type\":\"LegendItem\"},{\"attributes\":{},\"id\":\"2698\",\"type\":\"LinearScale\"},{\"attributes\":{},\"id\":\"2730\",\"type\":\"DatetimeTickFormatter\"},{\"attributes\":{\"days\":[1,4,7,10,13,16,19,22,25,28]},\"id\":\"2739\",\"type\":\"DaysTicker\"},{\"attributes\":{\"days\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]},\"id\":\"2738\",\"type\":\"DaysTicker\"},{\"attributes\":{\"source\":{\"id\":\"2722\"}},\"id\":\"2726\",\"type\":\"CDSView\"},{\"attributes\":{},\"id\":\"2709\",\"type\":\"WheelZoomTool\"},{\"attributes\":{\"overlay\":{\"id\":\"2714\"}},\"id\":\"2710\",\"type\":\"BoxZoomTool\"},{\"attributes\":{},\"id\":\"2713\",\"type\":\"HelpTool\"},{\"attributes\":{},\"id\":\"2728\",\"type\":\"BasicTickFormatter\"},{\"attributes\":{\"months\":[0,4,8]},\"id\":\"2744\",\"type\":\"MonthsTicker\"},{\"attributes\":{\"axis\":{\"id\":\"2700\"},\"grid_line_alpha\":0.3,\"ticker\":null},\"id\":\"2703\",\"type\":\"Grid\"},{\"attributes\":{},\"id\":\"2711\",\"type\":\"SaveTool\"},{\"attributes\":{\"num_minor_ticks\":5,\"tickers\":[{\"id\":\"2735\"},{\"id\":\"2736\"},{\"id\":\"2737\"},{\"id\":\"2738\"},{\"id\":\"2739\"},{\"id\":\"2740\"},{\"id\":\"2741\"},{\"id\":\"2742\"},{\"id\":\"2743\"},{\"id\":\"2744\"},{\"id\":\"2745\"},{\"id\":\"2746\"}]},\"id\":\"2701\",\"type\":\"DatetimeTicker\"},{\"attributes\":{},\"id\":\"2732\",\"type\":\"Selection\"},{\"attributes\":{},\"id\":\"2692\",\"type\":\"DataRange1d\"},{\"attributes\":{},\"id\":\"2733\",\"type\":\"UnionRenderers\"}],\"root_ids\":[\"2689\"]},\"title\":\"Bokeh Application\",\"version\":\"2.2.3\"}};\n",
       "  var render_items = [{\"docid\":\"022d7889-a52a-4169-aa7d-9bd066aca113\",\"root_ids\":[\"2689\"],\"roots\":{\"2689\":\"9a6ea5b1-df6f-4257-9845-2b29d5874c93\"}}];\n",
       "  root.Bokeh.embed.embed_items_notebook(docs_json, render_items);\n",
       "\n",
       "  }\n",
       "  if (root.Bokeh !== undefined) {\n",
       "    embed_document(root);\n",
       "  } else {\n",
       "    var attempts = 0;\n",
       "    var timer = setInterval(function(root) {\n",
       "      if (root.Bokeh !== undefined) {\n",
       "        clearInterval(timer);\n",
       "        embed_document(root);\n",
       "      } else {\n",
       "        attempts++;\n",
       "        if (attempts > 100) {\n",
       "          clearInterval(timer);\n",
       "          console.log(\"Bokeh: ERROR: Unable to run BokehJS code because BokehJS library is missing\");\n",
       "        }\n",
       "      }\n",
       "    }, 10, root)\n",
       "  }\n",
       "})(window);"
      ],
      "application/vnd.bokehjs_exec.v0+json": ""
     },
     "metadata": {
      "application/vnd.bokehjs_exec.v0+json": {
       "id": "2689"
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from bokeh.plotting import figure, output_file, show\n",
    "from bokeh.io import output_notebook\n",
    "output_notebook()\n",
    "\n",
    "p1 = figure(x_axis_type=\"datetime\", title=\"Olist Sales\")\n",
    "p1.grid.grid_line_alpha=0.3\n",
    "p1.xaxis.axis_label = 'Order Purchased on'\n",
    "p1.yaxis.axis_label = 'Price'\n",
    "p1.line(prices.index, prices['price'], color='Red', legend_label='Revenue')\n",
    "p1.legend.location = \"top_left\"\n",
    "\n",
    "show(p1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### EDA on different product categories"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [],
   "source": [
    "category = order.merge(product,left_on='product_id',right_on='product_id')\n",
    "category = category.merge(prd_name,left_on='product_category_name',right_on='product_category_name')\n",
    "num_of_prod = pd.DataFrame(category.groupby(category['product_category_name_english']).size(),columns = ['count'])\n",
    "num_of_prod = num_of_prod.sort_values(by='count',ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/rdcosta/miniconda3/envs/dm_w2/lib/python3.7/site-packages/pandas/core/indexing.py:670: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  iloc._setitem_with_indexer(indexer, value)\n"
     ]
    }
   ],
   "source": [
    "temp = num_of_prod.head(20)\n",
    "if len(num_of_prod) > 20:\n",
    "    temp.loc['remaining {0} categories'.format(len(num_of_prod) - 20)] = sum(num_of_prod['count'][20:])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10,10))\n",
    "plt.barh(temp.index,temp['count'],color='darkred')\n",
    "plt.xlabel('Count')\n",
    "plt.ylabel('Category Name')\n",
    "plt.title('Top categories (Number of orders)')\n",
    "plt.gca().invert_yaxis()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Top 5 customers with highest number of orders"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [],
   "source": [
    "cust_loc = ord_cust.merge(cust,left_on = 'customer_id',right_on='customer_id')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cust_id</th>\n",
       "      <th>order_count</th>\n",
       "      <th>cust_city</th>\n",
       "      <th>cust_state</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>8d50f5eadf50201ccdcedfb9e2ac8455</td>\n",
       "      <td>17</td>\n",
       "      <td>sao paulo</td>\n",
       "      <td>SP</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3e43e6105506432c953e165fb2acf44c</td>\n",
       "      <td>9</td>\n",
       "      <td>praia grande</td>\n",
       "      <td>SP</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>6469f99c1f9dfae7733b25662e7f1782</td>\n",
       "      <td>7</td>\n",
       "      <td>santos</td>\n",
       "      <td>SP</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1b6c7548a2a1f9037c1fd3ddfed95f33</td>\n",
       "      <td>7</td>\n",
       "      <td>ituiutaba</td>\n",
       "      <td>MG</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ca77025e7201e3b30c44b472ff346268</td>\n",
       "      <td>7</td>\n",
       "      <td>recife</td>\n",
       "      <td>PE</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                            cust_id  order_count     cust_city cust_state\n",
       "0  8d50f5eadf50201ccdcedfb9e2ac8455           17     sao paulo         SP\n",
       "1  3e43e6105506432c953e165fb2acf44c            9  praia grande         SP\n",
       "2  6469f99c1f9dfae7733b25662e7f1782            7        santos         SP\n",
       "3  1b6c7548a2a1f9037c1fd3ddfed95f33            7     ituiutaba         MG\n",
       "4  ca77025e7201e3b30c44b472ff346268            7        recife         PE"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "main_cust = pd.DataFrame(cust_loc.groupby('customer_unique_id').size(),columns=['count'])\n",
    "main_cust = main_cust.sort_values(by='count',ascending=False)\n",
    "main_cust = main_cust.merge(cust_loc,left_on = main_cust.index,right_on='customer_unique_id')\n",
    "main_cust = pd.concat([main_cust['customer_unique_id'],main_cust['count'],main_cust['customer_city'],main_cust['customer_state']], axis=1, keys=['cust_id', 'order_count','cust_city','cust_state'])\n",
    "main_cust = main_cust.drop_duplicates()\n",
    "main_cust = main_cust.sort_values(by='order_count',ascending=False)\n",
    "main_cust = main_cust.reset_index(drop=True)\n",
    "main_cust.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Top 5 customers with highest money spent"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cust_id</th>\n",
       "      <th>Amount</th>\n",
       "      <th>cust_city</th>\n",
       "      <th>cust_state</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0a0a92112bd4c708ca5fde585afaa872</td>\n",
       "      <td>13664.08</td>\n",
       "      <td>rio de janeiro</td>\n",
       "      <td>RJ</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>46450c74a0d8c5ca9395da1daac6c120</td>\n",
       "      <td>9553.02</td>\n",
       "      <td>florianopolis</td>\n",
       "      <td>SC</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>da122df9eeddfedc1dc1f5349a1a690c</td>\n",
       "      <td>7571.63</td>\n",
       "      <td>araruama</td>\n",
       "      <td>RJ</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>763c8b1c9c68a0229c42c9fc6f662b93</td>\n",
       "      <td>7274.88</td>\n",
       "      <td>vila velha</td>\n",
       "      <td>ES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>dc4802a71eae9be1dd28f5d788ceb526</td>\n",
       "      <td>6929.31</td>\n",
       "      <td>campo grande</td>\n",
       "      <td>MS</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                            cust_id    Amount       cust_city cust_state\n",
       "0  0a0a92112bd4c708ca5fde585afaa872  13664.08  rio de janeiro         RJ\n",
       "1  46450c74a0d8c5ca9395da1daac6c120   9553.02   florianopolis         SC\n",
       "2  da122df9eeddfedc1dc1f5349a1a690c   7571.63        araruama         RJ\n",
       "3  763c8b1c9c68a0229c42c9fc6f662b93   7274.88      vila velha         ES\n",
       "4  dc4802a71eae9be1dd28f5d788ceb526   6929.31    campo grande         MS"
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "temp = cust_loc.merge(pay,left_on='order_id',right_on='order_id')\n",
    "temp2 = pd.concat([temp['customer_unique_id'],temp['payment_value']],axis=1,keys=['cust_id','price'])\n",
    "temp2 = temp2.groupby('cust_id').sum()\n",
    "cust_pay = temp.merge(temp2,right_on= temp2.index, left_on = 'customer_unique_id')\n",
    "cust_pay = pd.concat([cust_pay['customer_unique_id'] , cust_pay['price'] , cust_pay['customer_city'] , cust_pay['customer_state']],axis=1,keys=['cust_id','Amount','cust_city','cust_state'])\n",
    "cust_pay = cust_pay.sort_values(by='Amount',ascending=False)\n",
    "cust_pay = cust_pay.drop_duplicates()\n",
    "cust_pay = cust_pay.reset_index(drop=True)\n",
    "cust_pay.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Top 5 categories with highest revenue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [],
   "source": [
    "top_category_revenue = category.merge(pay,left_on = 'order_id' , right_on = 'order_id')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>revenue</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>category</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>agro_industry_and_commerce</th>\n",
       "      <td>118730.61</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>air_conditioning</th>\n",
       "      <td>91170.66</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>art</th>\n",
       "      <td>30992.93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>arts_and_craftmanship</th>\n",
       "      <td>2326.17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>audio</th>\n",
       "      <td>60324.62</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                              revenue\n",
       "category                             \n",
       "agro_industry_and_commerce  118730.61\n",
       "air_conditioning             91170.66\n",
       "art                          30992.93\n",
       "arts_and_craftmanship         2326.17\n",
       "audio                        60324.62"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "top_category_revenue = pd.concat([top_category_revenue['product_category_name_english'] , top_category_revenue['payment_value']],axis=1,keys=['category','revenue'])\n",
    "top_category_revenue = top_category_revenue.groupby('category').sum()\n",
    "top_category_revenue.head(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Comparing descriptive statistics of product price with payment value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    112650.000000\n",
       "mean        120.653739\n",
       "std         183.633928\n",
       "min           0.850000\n",
       "25%          39.900000\n",
       "50%          74.990000\n",
       "75%         134.900000\n",
       "max        6735.000000\n",
       "Name: price, dtype: float64"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "order['price'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    103886.000000\n",
       "mean        154.100380\n",
       "std         217.494064\n",
       "min           0.000000\n",
       "25%          56.790000\n",
       "50%         100.000000\n",
       "75%         171.837500\n",
       "max       13664.080000\n",
       "Name: payment_value, dtype: float64"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pay['payment_value'].describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### EDA on location and sales"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [],
   "source": [
    "cust_state = pd.DataFrame(cust_loc.groupby('customer_state').size(),columns=['count'])\n",
    "cust_state = cust_state.sort_values(by='count',ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10,10))\n",
    "plt.barh(cust_state.index,cust_state['count'], color='green')\n",
    "plt.xlabel('Number of Orders')\n",
    "plt.ylabel('State')\n",
    "plt.title('Top States with most number of orders')\n",
    "plt.gca().invert_yaxis()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [],
   "source": [
    "temp3 = cust_loc.merge(pay,left_on='order_id',right_on='order_id')\n",
    "state_pay = pd.concat([temp3['customer_state'] , temp3['payment_value']],axis=1,keys=['state','amount'])\n",
    "state_pay = state_pay.groupby('state').sum()\n",
    "state_pay = state_pay.sort_values(by='amount',ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10,10))\n",
    "plt.barh(state_pay.index,state_pay['amount'])\n",
    "plt.xlabel('Total Amount')\n",
    "plt.ylabel('State')\n",
    "plt.title('Top States with highest money spent')\n",
    "plt.gca().invert_yaxis()\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
